theorem hasOppositeSign_spec_satisfied (a : Int) (b : Int) :
  hasOppositeSign_spec a b (hasOppositeSign a b) := by
  unfold hasOppositeSign hasOppositeSign_spec
  apply Iff.intro
  case mp =>
    intro h
    cases h
    case inl h₁ =>
      simp only [Bool.or_true, Bool.and_true, Bool.true_iff] 
      rw [←decide_eq_true (decide (a < 0) = true), ←decide_eq_true (decide (b > 0) = true)]
      simp [h₁.left, h₁.right]
    case inr h₂ =>
      simp only [Bool.true_or, Bool.and_true, Bool.true_iff]
      rw [←decide_eq_true (decide (a > 0) = true), ←decide_eq_true (decide (b < 0) = true)]
      simp [h₂.left, h₂.right]
  case mpr =>
    intro h
    cases Bool.or_eq_true.mp h
    case inl h₁ =>
      left
      simp [decide_eq_true_iff] at h₁
      exact ⟨h₁.1, h₁.2⟩
    case inr h₂ =>
      right
      simp [decide_eq_true_iff] at h₂
      exact ⟨h₂.1, h₂.2⟩