Below is one way to analyze what’s going wrong. I’ll go through a step‐by‐step diagnosis of the error messages and explain how the proof “misbehaves.”

–––––––––––––––––––––––––––––––––––––––––––
1. Identifying the Failing Tactic

• One error says, “function expected at c” and later “unexpected token ‘using’” and “tactic ‘introN’ failed, insufficient number of binders.” These errors come from lines in your proof where you are using names like if_pos, if_neg, and if_pos_or_neg. (For example, you write

  apply Int.le_trans _ (if_pos _)  
  ...
  exact if_neg

)
Lean complains that it sees something like “if_pos” being applied to “_” when in a position where it expects a function. In short, a tactic (or lemma) named if_pos is being used as if it were available and “function‐like” but it isn’t defined in your context.

–––––––––––––––––––––––––––––––––––––––––––
2. Considering the Proof State at the Point of Error

• After the line
  unfold minOfThree minOfThree_spec
you are left with a goal that is an “and” of two propositions. In each part you have a let–expression: the computed minimum is written as “let m := if a ≤ b then a else b; if m ≤ c then m else c”. Working with such terms will usually require doing case analysis on the “if” conditions.  
• Instead of using tactics like if_pos, if_neg or if_pos_or_neg (which one may normally expect when working with datatypes with decidable conditions, but Lean does not automatically provide them in tactic mode for your particular definition), the proof attempts to “apply” these nonexistent lemmas. Lean then interprets, say “if_pos _”, as an application of a term that is supposed to be a function, but in fact “if_pos” is not defined, so Lean mistakenly thinks that “c” (or another integer) is getting “applied” as if it were a function.

–––––––––––––––––––––––––––––––––––––––––––
3. Checking Whether the Proof Approach Matches the Specification

• Your specification, minOfThree_spec, states two things: (i) the returned result is ≤ a, b, and c, and (ii) the result equals one of a, b, or c. The definition of minOfThree uses “if” expressions to compute the minimum. In order to prove these facts by case analysis, one must “by_cases” on the Boolean conditions (for example, a ≤ b, and then in that branch analyze if (if a ≤ b then a else b) ≤ c).  
• The intended proof is on the right track (splitting into cases) but the tactics you are trying to invoke (if_pos, if_neg, if_pos_or_neg) are not standard tactics nor are they the proper way to handle such “if” expressions.

–––––––––––––––––––––––––––––––––––––––––––
4. Identifying Type Mismatches and Incorrect Assumptions

• Error “function expected at c [...] term has type ℤ” comes from Lean trying to “apply” an integer like a function. The “if_pos” and “if_neg” identifiers are not defined to be functions that yield proofs about the “if” construct. Instead, Lean sees them as “free identifiers” that have not been declared or have the wrong type.  
• In other words, you are assuming that Lean somehow “knows” special lemmas for unfolding if–expressions (as if there were something like if_pos : (h : condition true) → …), but you haven’t provided them. This leads to type mismatches: for example, using “if_pos _” in a position where a proof of a ≤ c is expected.

–––––––––––––––––––––––––––––––––––––––––––
5. Considering Alternative Proof Strategies

• Rather than trying to “apply” lemmas like if_pos, you may want to use the tactic by_cases to split on the Boolean conditions:
  by_cases h₁ : a ≤ b, { … }, { … }
Then, in the branch where h₁ holds, you know that m = a; in the other branch m = b.  
• Similarly, after that you can perform another case split on “if m ≤ c” rather than trying to “apply” or “exact” if_neg.
• You could also use simp or refl after unfolding the definition since “if” expressions often can be simplified by the built-in if–then–else beta–rules.

–––––––––––––––––––––––––––––––––––––––––––
Conclusion & Root Cause

The root problem is that your proof uses tactics/identifiers (if_pos, if_neg, if_pos_or_neg) as if they were pre‐defined lemmas or tactics for handling “if” expressions, but in Lean 4 these either do not exist or are not provided in your context. This leads Lean to misinterpret them as functions (or even as numbers), hence causing “function expected” and type errors.

To fix the proof you should:
 • Remove the references to if_pos, if_neg, and if_pos_or_neg.
 • Instead, use explicit case splits (using by_cases) on the decidable propositions a ≤ b and (if a ≤ b then a else b) ≤ c.
 • Then prove the two parts of your specification in each case separately, using transitivity (Int.le_trans) as needed.
 • Lastly, simplify the let–expressions by rewriting them (or unfolding them) so that the computations become explicit.

Following these directions should let you rework the proof in a way that Lean understands and type-checks correctly.

Feel free to ask if you need further guidance reworking the proof!