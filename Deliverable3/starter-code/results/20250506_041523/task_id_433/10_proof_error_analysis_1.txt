Below is one analysis of what’s going wrong and why. I’ll explain step‐by‐step.

───────────────────────────── 
1. The Failing Tactic

The proof begins by “unfolding” the definitions and then calling

  simp [List.all, Array.toList, List.all]

which “simplifies” the goal. Then the proof does

  apply Iff.intro

to split the bidirectional implication. The error actually arises now when Lean must “close” the two resulting subgoals. In one of those subgoals the goal looks roughly like

  (∀ i, i < a.size → a[i]! < n) ↔ (∀ (i : ℕ) (H : i < a.size), a[i]! < n).

Even though these two formulations are logically equivalent (they only differ in whether the “hypothesis” is written as an arrow “→” or as an additional argument via dependent product syntax) Lean does not consider them definitionally equal and does not rewrite one into the other automatically. In short, the tactic “apply Iff.intro” does not finish the job because one branch leaves behind an unsolved—and non‐trivial—goal about converting between different (but logically equivalent) presentations.

───────────────────────────── 
2. The Proof State at the Point of Failure

After unfolding and simplifying, the goal is essentially an equivalence between two forms of quantification:
  Left side: “∀ i, i < a.size → a[i]! < n”
  Right side: “∀ (i : ℕ) (H : i < a.size), a[i]! < n”
Even though a human sees them as “the same” (the only difference is whether the hypothesis is written in the arrow or as an extra argument) Lean’s conversion checker does not reduce one to the other automatically. In short, the “simplification” left an equivalence that is not “trivial” from a definitional point of view.

───────────────────────────── 
3. The Proof Approach Versus the Specification

The specification for isGreater_spec is

  (∀ i, i < a.size → n > a[i]!) ↔ result

and the implementation of isGreater uses a List.all check after converting the array with Array.toList. When you unfold the definitions, you end up with a statement about List.all that in turn unfolds to a universally quantified statement over the list. Because of that “conversion” (from array to list) the statement is no longer in exactly the same form as the specification; the universal quantification is “wrapped” slightly differently, and (in our proof) even the inequality’s direction is flipped (using a[i]! < n instead of n > a[i]!). Although these are equivalent properties, the tactic “simp” and the later “apply Iff.intro” do not “recognize” the equality automatically.

───────────────────────────── 
4. Type Mismatches or Incorrect Assumptions

There appear to be two main mismatches:
 • The statement produced by the simplifier has a differently “curried” universal quantifier: one side writes “∀ i, i < a.size → …” while the other side writes “∀ (i : ℕ) (H : i < a.size), …”. In Lean these are not definitionally equal even though they mean the same thing logically.
 • There is an ordering issue (n > a[i]! vs. a[i]! < n) but that is just a matter of notation, and Lean “sees” n > a[i]! as the same as a[i]! < n.
Because of the quantifier mismatch the two “sides” of the equivalence are not identical and no rewriting lemma has been applied to identify them.

───────────────────────────── 
5. Alternative Proof Strategies

There are several ways one might fix the proof:
 • Instead of relying on simp to “fuse” the two forms of universal quantification, one might explicitly rewrite one side into the other (for example, using a lemma that shows ∀ i, (i < a.size → P i) is equivalent to ∀ (i : ℕ) (H : i < a.size), P i).
 • Alternatively, one could avoid unfolding the definitions entirely by using a “by cases” argument on the underlying list property (i.e. prove the equivalence “manually” for each direction by interpreting List.all).
 • A more direct fix would be to write a small helper lemma that “uncurries” the hypothesis. For example, one could prove that
  ∀ (i : ℕ), i < a.size → P i  ↔  ∀ (i : ℕ) (H : i < a.size), P i.
This helper lemma could then be used with rewrite or exact, so that the simplification now truly closes the goal.

───────────────────────────── 
Conclusion and Root Cause

The root cause is that after unfolding isGreater and isGreater_spec, Lean’s goal becomes an equivalence comparing two forms of universal statements that differ only in whether the side condition is presented as an arrow or as an extra parameter. Lean’s automation (via simp) does not know by default that these two formulations are the same. As a result, after “apply Iff.intro” one branch remains unsolved.

To fix the problem, you could add an explicit lemma to “uncurry” the universal quantifier or, alternatively, structure the proof so that you manually handle the conversion between “i < a.size → …” and “∀ (i : ℕ) (H : i < a.size), …”. For example:

  lemma forall_uncurry {P : ℕ → Prop} :
    (∀ i, i < a.size → P i) ↔ ∀ (i : ℕ) (H : i < a.size), P i :=
  ⟨fun h i hi => h i hi, fun h i hi => h i hi⟩

Once you have such a lemma, you can add a rewrite step in your proof to match the specification exactly.

───────────────────────────── 
Summary

– The tactic that fails is the “apply Iff.intro” (or more precisely, one branch of the resulting cases) because the goal remains as an equivalence between two universally quantified formulations that Lean does not automatically reduce.
– In the proof state, the goal is to prove (∀ i, i < a.size → a[i]! < n) is equivalent to (∀ i (H : i < a.size), a[i]! < n).
– The approach initially appears to match the specification, but the unfolding of definitions causes a mismatch.
– The mismatch is due to a difference in how the quantifiers are “curried” rather than any mathematical error in the inequality.
– A more explicit handling of the quantifiers (or a rewrite with an appropriate lemma) should resolve the error.

By revising the proof to explicitly bridge this gap, the unsolved goal will be fixed.