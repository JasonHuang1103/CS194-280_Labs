theorem minOfThree_spec_satisfied (a : Int) (b : Int) (c : Int) :
  minOfThree_spec a b c (minOfThree a b c) := by
  unfold minOfThree_spec
  unfold minOfThree
  split
  · split
    · -- Prove result <= a
      by_cases h₁ : a <= b
      · by_cases h₂ : a <= c
        · simp [h₁, h₂]
        · simp [h₁, h₂]
          exact h₂
      · by_cases h₂ : b <= c
        · simp [h₁, h₂]
        · simp [h₁, h₂]
          exact h₂
    · -- Prove result <= b
      by_cases h₁ : a <= b
      · by_cases h₂ : a <= c
        · simp [h₁, h₂]
          exact h₁
        · simp [h₁, h₂]
          have : c <= b := le_trans h₁ (le_of_not_ge h₂)
          assumption
      · by_cases h₂ : b <= c
        · simp [h₁, h₂]
        · simp [h₁, h₂]
          let : b <= c := le_of_not_ge h₂
          have : c <= b := le_of_not_ge h₁
          assumption
    · -- Prove result <= c
      by_cases h₁ : a <= b
      · by_cases h₂ : a <= c
        · simp [h₁, h₂]
          exact h₂
        · simp [h₁, h₂]
      · by_cases h₂ : b <= c
        · simp [h₁, h₂]
          exact h₂
        · simp [h₁, h₂]
  · -- Prove result is one of a, b, c
    by_cases h₁ : a <= b
    · by_cases h₂ : a <= c
      · simp [h₁, h₂]
      · simp [h₁, h₂]
    · by_cases h₂ : b <= c
      · simp [h₁, h₂]
      · simp [h₁, h₂]