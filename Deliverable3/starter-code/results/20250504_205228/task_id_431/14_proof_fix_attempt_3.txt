```lean
theorem hasCommonElement_spec_satisfied (a : Array Int) (b : Array Int) :
  hasCommonElement_spec a b (hasCommonElement a b) := by
  unfold hasCommonElement hasCommonElement_spec
  apply Iff.intro
  · -- Prove the direction: if hasCommonElement a b is true, then ∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!
    intro h
    simp only [Array.any_eq_true] at h
    obtain ⟨i, hi, h_inner⟩ := h
    simp only [Array.any_eq_true] at h_inner
    obtain ⟨j, hj, h_eq⟩ := h_inner
    exact ⟨i, j, hi, hj, of_decide_eq_true h_eq⟩

  · -- Prove the direction: if ∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!, then hasCommonElement a b is true
    intro h
    simp only [Array.any_eq_true]
    obtain ⟨i, j, hi, hj, h_eq⟩ := h
    use i, hi
    simp only [Array.any_eq_true]
    use j, hj
    exact decide_eq_true h_eq
```

### Explanation
1. Removed the repeated `unfold hasCommonElement hasCommonElement_spec` which was causing an error.
2. Replaced `decide_eq_true_eq` with `Array.any_eq_true` simplification in the right context.
3. Ensured `of_decide_eq_true` and `decide_eq_true` are appropriately used for handling the conversion between boolean results and propositions.