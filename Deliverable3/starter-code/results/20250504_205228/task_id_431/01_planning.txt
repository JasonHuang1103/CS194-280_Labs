Below is a plan outlining the approach to both implement the function and prove its correctness.

───────────────────────────────  
Step 1. Implementation Plan

1.1. Understand the Problem:
 • We need to check if two arrays have at least one element in common.
 • If one or both arrays are empty, then no common element exists (the function should return false).

1.2. Choose an Implementation Strategy:
 • Use the Array.any? (or similar) predicate.
 • For each element x in the first array a, check if there is any element y in the second array b such that x = y.
 • This can be done by writing
  a.any? (λ x => b.any? (λ y => x = y))
  Since Array.any? returns false when the array is empty, it automatically covers the empty-array case.

───────────────────────────────  
Step 2. Specification of the Function

2.1. Write the Specification Statement:
 • The specification (hasCommonElement_spec) says:
  "There exists i and j (with valid indices for a and b, respectively) such that a[i]! = b[j]! if and only if the output result is true."
 • Written formally as:
  (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ result

───────────────────────────────  
Step 3. Proof Strategy

3.1. Overview:
 • We need to show that for all arrays a, b,
  hasCommonElement_spec a b (hasCommonElement a b)
  This requires proving the equivalence:
   (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ a.any? (λ x => b.any? (λ y => x = y))
 • The proof is split into two implications.

3.2. Forward Direction (⇒):
 • Assume there exists i and j such that a[i]! = b[j]! and indices are in range.
 • Argue that then for x = a[i]! the inner predicate b.any? (λ y => x = y) holds, because b[j]! equals x.
 • Hence, a.any? (λ x => b.any? (λ y => x = y)) evaluates to true.

3.3. Backward Direction (⇐):
 • Assume a.any? (λ x => b.any? (λ y => x = y)) evaluates to true.
 • By properties of the any? function, there must be some element x contained in array a (say at index i) such that b.any? (λ y => x = y) is also true.
 • Then, by the property of b.any?, there exists some y in b (at index j) with y = x.
 • Hence, we have found indices i and j with a[i]! = b[j]! and the indices are within range.

3.4. Useful Auxiliary Lemmas:
 • Rely on known lemmas about the Array.any? function (or its equivalence to an existence statement) to bridge the gap between the existential quantifier in the spec and the boolean computations in the implementation.
 • If necessary, prove small helper lemmas about Array.any? that equate:
  a.any? (λ x => P x) ↔ ∃ i, i < a.size ∧ P (a[i]!)
  and similarly for b.any?.

3.5. Structure the Proof Script:
 • Unfold the definitions for hasCommonElement and hasCommonElement_spec.
 • Split the proof into two implications.
 • Use the appropriate tactics (like cases, exists.intro, simp, etc.) to handle the conversion from boolean predicates to the existence of indices.

───────────────────────────────  
Step 4. Summary of Key Points

• Implementation: Use nested calls to Array.any? to check for a common element.
• Proof: Show that the boolean value computed by hasCommonElement exactly captures the condition that there exists a pair of indices i, j such that a[i]! = b[j]! (and vice versa) using properties of the any? predicate.
• Handle the “empty array” case by noting that Array.any? naturally returns false when the array is empty.
• Use or prove auxiliary lemmas as needed to relate the boolean outcomes of .any? to the existence of an index.

───────────────────────────────  
This plan gives a step-by-step outline for implementing the Lean 4 function and proving that it meets the given specification. You can now proceed to fill in the implementation and the proof details in your Lean file using the provided structure.