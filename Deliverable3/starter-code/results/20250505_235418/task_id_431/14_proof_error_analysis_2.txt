Below is one way to analyze what’s going on. (Note that the error message shows two kinds of problems, one “unsolved goals” error and one bullet (“·”) parsing error.) In our case the error comes from using several conversion lemmas (and the bullet layout) but not actually “solving” all the subgoals that Lean creates. Let’s break it down step‐by‐step:

──────────────────────────────
1. Which tactic is failing and why

When you write

  unfold hasCommonElement hasCommonElement_spec  
  constructor  
  · intro h  
    …  
  · rintro ⟨i, j, hi, hj, rfl⟩  
    …  

the call to constructor splits the goal into proving both directions of the “if and only if” (the “mp” and “mpr” directions). In each branch you are “converting” a Boolean equality (a.any … = true) into an existential statement by applying  
  (Bool.decide_eq_true_iff _).mp  
or  
  (Bool.decide_eq_true_iff _).mpr  
and then using Array.exists_mem_iff_any to bring the existential inside the array “any”.  
In both cases Lean reports that there remain “unsolved goals” for the conversion lemma. In effect, the tactic is “failing” because the application of these lemmas does not completely discharge the current goal. In addition, Lean complains that after the end of one bullet the token · is unexpected. (In Lean 4 the bullet syntax is very sensitive to indentation and termination of tactic blocks.)

──────────────────────────────
2. The proof state at that point

Before the first bullet the goal (after unfolding) is

  (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ (a.any (λ x => b.any (λ y => decide (x = y)))) = true

After using constructor, Lean breaks that into two subgoals:

• mp (forward direction):  
  Assume (a.any (λ x => b.any (λ y => decide (x = y)))) = true. Prove ∃ i j, …  
• mpr (backward direction):  
  Assume ∃ i j, … holds. Prove (a.any …) = true.

In both branches the proofs use the conversion lemmas mentioned above. However, when you write
  (Bool.decide_eq_true_iff _).mp h
Lean must know that the decidability instance for the equality “x = y” is available and that the “decide” function is being applied to an equality between integers. Also, the lemma Array.exists_mem_iff_any (which “lifts” existence from the array’s membership predicate to the Boolean any) must be applied with the correct type. If Lean cannot “fill in” the underscore or completely resolve the intermediate goals, then the subgoal remains unsolved.

──────────────────────────────
3. Does the proof approach match the specification?

The intended proof is as follows:
 – When the method returns true, use the equivalence (a.any … = true ↔ ∃ x ∈ a, …) and similarly for the inner call on b so that you can extract an x and a y. Then use x’s and y’s positions (via indexOf) to witness the existential in the specification.
 – In the other direction, assume there are indices i and j with a common element and then “reconstruct” the Boolean statement by “using” that element with array membership.
This is a correct overall strategy. The specification is “if and only if” and you are trying to prove both directions. In principle the outline is correct.

──────────────────────────────
4. Are there any type mismatches or incorrect assumptions?

There are two points where things can go wrong:
 a. Notice that you use “(Bool.decide_eq_true_iff _).mp h”. The underscore is meant to be filled by Lean with the proposition (x = y) together with its decidability instance. Since we are dealing with integers, Lean does have a decidable equality instance. However, if Lean doesn’t “infer” the correct instance here (or if the API of decide_eq_true_iff has changed) then you may have an unsolved “instance argument” or even more lurking unsolved subgoals.
 b. In the first branch you eventually finish with “rfl” to conclude that a[i]! = b[j]! because the two array lookup operations are “definitionally equal.” But note that indexOf returns the index of the first occurrence of an element. Although it is true that if the element is in the array then indexOf is less than the size, you must be careful that the conversion from “∃ x, x ∈ a” (obtained from Array.exists_mem_iff_any) to “∃ i, i < a.size ∧ a[i]! = x” is justified. (Mathlib may have a lemma to that effect, but if not then Lean will complain with an unsolved goal.)
 c. Finally, the bullet notation in Lean 4 is whitespace‐sensitive. If the indentation or termination of a given bullet block is off, then Lean will be confused when it sees the next bullet (as in “unexpected token ·”) or thinks there is an “unsolved goal” remaining.

──────────────────────────────
5. Alternative proof strategies

You might try one or both of these approaches:
 • Instead of “unfold” and using the conversion lemmas by hand, try rewriting with known lemmas (for example, use rewrite rules from Mathlib that convert a.any f = true to ∃ x ∈ a, f x = true). This might “solve” the intermediate subgoals.
 • Avoid the bullet (“·”) syntax if you suspect that the indentation is off. Instead, use begin…end blocks or curly braces { … } to fix the scope of each subproof.
 • Provide the decidability instance explicitly. For instance, write (Bool.decide_eq_true_iff (@Int.decideEq _)) or similar so that Lean does not have to “guess” the missing argument.
 • Use “simp” or “decide” tactics if applicable to automatically prove the Boolean/propositional equivalences.

──────────────────────────────
Final analysis and suggestion for a fix

The root cause is that when you apply the conversion lemmas (Array.exists_mem_iff_any and Bool.decide_eq_true_iff) you leave Lean with intermediate subgoals that it does not know how to solve automatically. In addition, the bullet syntax (the use of “·”) may be mis‐indented (or used in a context where Lean does not know the correct bullet level) so that one branch of your “constructor” remains incomplete. 

To fix the issue you should:
 1. Ensure that the bullets are indented properly so that each branch of the proof is clearly delimited. You may try using braces or begin…end blocks instead.
 2. Provide the full information for the conversion lemmas. For example, explicitly supply the decidability instance for “x = y” (even though it should be inferred) so that Lean knows which instance to use.
 3. Possibly “simplify” the Boolean to Prop equivalence by invoking a rewriting lemma that states, for an array a and predicate f: a.any f = true ↔ (∃ x, x ∈ a ∧ f x = true). Exploiting such a lemma can close the remaining subgoals automatically.
 4. Check that the use of indexOf to witness the existence also works correctly; if necessary, use a lemma that links membership with a bound on indexOf.

Once these adjustments are made, Lean should be able to discharge the goals (both “mp” and “mpr”) without leaving “unsolved goals” behind.

In summary, the error arises from a mixture of leftover unsolved subgoals (due to incomplete conversion between Boolean equality and existence) and bullet syntax that is not parsed as expected. Adjusting the tactic steps (by supplying missing instance arguments or reworking the proof slightly) and ensuring correct bullet indentation is the way forward.