Below is a step‐by‐step explanation of what’s going wrong with your proof and why Lean is unhappy.

──────────────────────────── Step 1: Which tactic is “failing” and why

• The error message mentions two things:
  – “unsolved goals” for the two cases (the “mp” and “mpr” directions of the ↔).
  – An “unexpected token '·'” which is a sign that Lean got confused by the bullet (or “dot”) notation.
  
In effect you have started a proof of an equivalence by writing

  constructor
  · intro h 
    … 
  · rintro ⟨i, j, hi, hj, rfl⟩ 
    …

which should break the goal into two implications. However, Lean never ‘seals’ the two subgoals because of an underlying type mismatch (see below) and, as a consequence, complains about unsolved goals. The “unexpected token ‘·’” error is triggered if Lean is expecting a command (or if the previous bullet’s block was not closed) but finds a bullet marker instead.

──────────────────────────── Step 2: Consider the proof state at that point

After you perform

  unfold hasCommonElement hasCommonElement_spec

the goal becomes to prove

  (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ a.any (λ x => b.any (λ y => x = y))

Notice that on the left-hand side, you have a Prop (an existential statement) and on the right-hand side you have a Bool (the result of a.any …). Lean cannot automatically treat a Bool as a proposition.

──────────────────────────── Step 3: Check if the proof approach matches the specification

Your intended theorem is this one:

  “hasCommonElement_spec a b r” is supposed to capture: “There is a common element in a and b if and only if r holds.” 

However, you have defined it as
  (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ r

where r in your intended use is the value returned by hasCommonElement, i.e. a Bool. That is, you are comparing an existential proposition with a Bool. Moreover, in your proof you use lemmas like Array.exists_mem_iff_any that relate membership (a Prop) with the .any function (which gives a Bool). The approach would work only if you “bridge the gap” by comparing the outcome of .any to true, e.g. by writing

  (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ (r = true)

or by otherwise converting the Bool into a Prop. Since this bridging is missing, Lean is confused.

──────────────────────────── Step 4: Identify any type mismatches or incorrect assumptions

The main type mismatch is:

  Prop (i.e. ∃ i j, …)  vs.  Bool (i.e. a.any …)

Lean does not treat Bools as Propositions (unless you use a coercion or a “decidable” equality mechanism). In your proof you try to state an “iff” between these two different sorts. This mismatch is the primary reason that the tactics you use (like “obtain” and “exact”) never “close” the goal, and so Lean ends up reporting unsolved goals. Also, the bullet syntax error is a symptom of the proof block not being structured correctly due to the underlying issue.

──────────────────────────── Step 5: Consider alternative proof strategies

There are a couple of paths you might take:

1. Modify your specification. For example, change it to:
  def hasCommonElement_spec (a : Array Int) (b : Array Int) (r : Bool) : Prop :=
    (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ (r = true)
  Now both sides of the ↔ are propositions. Then your proof can proceed by showing that the boolean returned by hasCommonElement is true exactly when there exists a common element.

2. Alternatively, you could “lift” the Bool to a Prop by means of a conversion. There is a standard way to interpret a boolean as a proposition (the “decidable” predicate) but it’s usually simpler to work with r = true in such a context.

──────────────────────────── Conclusion (Root Cause and Suggested Fix)

The root cause is that your specification is comparing an existential proposition (∃ i j, …) with a Bool (the result of a.any …); they live in different universes (Prop versus Bool), and Lean does not automatically convert one into the other. In addition, the bullet formatting ends up “falling apart” because the underlying goals aren’t correctly solved.

To fix this, you should modify your specification – or the statement you are proving – so that the boolean is compared to true. For example, one could define:

  def hasCommonElement_spec (a : Array Int) (b : Array Int) (r : Bool) : Prop :=
    (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ (r = true)

and then prove that

  hasCommonElement_spec a b (hasCommonElement a b)

holds. This will ensure that both sides of the ↔ are propositions, and then the rest of your tactic proofs (using Array.exists_mem_iff_any, etc.) should make more sense to Lean.

I hope this analysis helps you isolate the type mismatch issue and provides a suggestion for how to fix the error. Happy proving!