Below is our step‐by‐step analysis of the problem and our recommendations for a fix.

─────────────────────────────  
Step 1. Identify the failing tactic

• The error complains that the tactic “split” fails and then later complains about an unexpected token “·”.  
• In the proof we start with

  unfold isGreater isGreater_spec  
  split  

The split tactic is usually used when the target is an “iff” or a conjunction. Here we want to prove an equivalence, so at first glance split would be the tactic of choice.

─────────────────────────────  
Step 2. Consider the proof state

When we “unfold” the definitions the goal becomes something like

  (∀ i, i < a.size → n > a[i]!) ↔ (a.toList.all (fun x => decide (n > x)) = true)

Notice two things:

• The left side is written directly as a “forall” (a Prop),  
• The right side is an equality between a Bool and true.

Lean 4 distinguishes Booleans (type Bool) from Propositions (type Prop) and it does not automatically assume that “b = true” is equivalent to b being true as a proposition. This structure does not match the pattern that split expects for an “iff”, and so split fails.

─────────────────────────────  
Step 3. Check if the proof approach matches the specification

Our specification is given by

  def isGreater_spec (n : Int) (a : Array Int) (result : Bool) : Prop :=
    (∀ i, i < a.size → n > a[i]!) ↔ result

That is, it relates a Prop on the left (a universal statement) with a Bool on the right. In the implementation we define

  def isGreater (n : Int) (a : Array Int) : Bool :=
    (a.toList).all (fun x => n > x)

After unfolding, the right side becomes an expression of type Bool (but then the spec requires writing “= true” in order to regard it as a proposition). Hence our proof target is really something like

  (∀ i, i < a.size → n > a[i]!) ↔ (… = true)

This mismatch (one side being a plain Prop and the other an equation between a Bool and true) makes the structure unrecognizable for tactics like split that expect both sides to have compatible “iff” structure.

─────────────────────────────  
Step 4. Identify type mismatches or incorrect assumptions

There are two main issues:

1. The specification is comparing a Prop (the “∀ …” statement) with a Bool (or rather an equation stating that a Boolean value is true). In Lean 4, Prop and Bool live in different universes and need an explicit conversion. (In Lean3 mathlib there is sometimes a coercion, but Lean 4 is more strict.)

2. The use of bullet markers (·) after the failing split is unexpected because once split fails the bullet “·” tokens are out of place. (In Lean 4 the bullet style is allowed in tactic mode but only when the previous tactic succeeded and established subgoals that the bullets can close.)

─────────────────────────────  
Step 5. Consider alternative proof strategies

There are a few ways you might fix the issue:

A. Change the spec so that both sides live in the same universe. For instance, you could write

  def isGreater_spec (n : Int) (a : Array Int) (result : Bool) : Prop :=
    (∀ i, i < a.size → n > a[i]!) ↔ (result = true)

or even better, use a formulation that treats the “result” as a Boolean predicate. Then your proof would not have to deal with “= true” on one side and a pure proposition on the other.

B. Convert the Boolean to a proposition explicitly. That is, use a lemma such as “decide_eq_true” so that you have an equivalence between a Boolean predicate b and the proposition (b = true).

C. Change your tactic proof. Instead of using “split”, you might wish to assume one direction at a time with, say, “intro h” and then use “apply” lemmas that bridge Booleans and Props. For example, make explicit use of “List.all_iff_forall” after first converting the Boolean statement to a proposition.

─────────────────────────────  
Summary of the root cause

The root cause of the error is that after unfolding the definitions, the goal becomes an equivalence between a universally quantified proposition and an equation “(a.toList.all …) = true”. Because these “sides” are in different universes (Prop versus Bool) and because the structure is not the typical “P ↔ Q” (with both P and Q being propositions), the split tactic cannot decompose it. In addition, the unexpected “·” tokens stem from the fact that after split fails, Lean does not expect bullet markers in that position.

─────────────────────────────  
Suggested direction for fixing it

• Either adjust the specification so that both sides of the ↔ are plain propositions. For example, define isGreater_spec as
  (∀ i, i < a.size → n > a[i]!) ↔ (a.toList.all (fun x => n > x))
ensuring that “n > x” is treated as a proposition (possibly by using “decide_eq_true” or similar lemmas).

• Or modify your proof to explicitly convert one side. For example, prove that
  a.toList.all (fun x => n > x) = true ↔ (∀ x ∈ a.toList, n > x)
and then use that lemma to bridge the gap.

• Finally, ensure that the bullet markers align with a successful tactic block so that Lean recognizes them properly.

By working in one of these directions you will avoid mixing up Booleans and Propositions and let tactics such as split work as expected.

─────────────────────────────  
Conclusion

The error arises because the proof is attempting to split an “iff” statement whose one side is a boolean equation (result = true) and the other side is a universally quantified proposition. This mismatch between Bool and Prop (plus the unexpected bullet tokens) is what leads Lean to fail the “split” tactic. Changing the spec (or explicitly converting between Bool and Prop) is the proper way to fix the problem.

Happy proving!