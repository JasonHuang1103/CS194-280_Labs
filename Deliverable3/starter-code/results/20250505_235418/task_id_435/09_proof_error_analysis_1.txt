Below is a step‐by‐step analysis of the error in your proof and suggestions on how to fix it.

──────────────────────────────────────────────
1. Tactic Failing and Why

• The error message tells us that the unsolved goal is
  n : ℕ ⊢ n % 10 < 10
 which appears in the second bullet when you write:
  exact Nat.mod_lt _ (by decide)
• The tactic “exact” is being used to apply Nat.mod_lt, but you left a placeholder “_” for the first argument. Lean expects an explicit value here (namely, n).

──────────────────────────────────────────────
2. The Proof State at That Point

After unfolding definitions and simplifying, you have split the conjunction into two subgoals:
 Subgoal 1: 0 ≤ n % 10
 Subgoal 2: n % 10 < 10

For the first subgoal you write:
 exact Nat.zero_le _
where again an underscore is used. In the second subgoal your bullet is:
 exact Nat.mod_lt _ (by decide)
At the point of processing the second subgoal, Lean sees a “hole” (an underscore) that is not filled. Consequently, the goal remains unsolved.

──────────────────────────────────────────────
3. Matching the Proof Approach with the Specification

The specification requires proving two facts about n % 10:
 (a) It is non-negative.
 (b) It is less than 10.
It is perfectly reasonable to use the fact that, in ℕ, the remainder modulo a positive number is always between 0 and that number. Mathlib provides Nat.zero_le and Nat.mod_lt for exactly these purposes. The approach is sound; the issue is with how the functions are applied.

──────────────────────────────────────────────
4. Type Mismatches or Incorrect Assumptions

Both Nat.zero_le and Nat.mod_lt are functions that expect explicit arguments:
 – Nat.zero_le : ∀ n : ℕ, 0 ≤ n
 – Nat.mod_lt : ∀ (n m : ℕ), m > 0 → n % m < m
Your proof tactic uses underscores (“_”) for the “n” (or n % 10) parts of these applications. Lean cannot automatically fill these holes in this context, so you get an unsolved goal.

──────────────────────────────────────────────
5. Alternative Proof Strategies

One straightforward strategy is to provide the arguments explicitly. For example:
 • For proving 0 ≤ n % 10, use:
  exact Nat.zero_le (n % 10)
 • For proving n % 10 < 10, use:
  exact Nat.mod_lt n 10 (by decide)
Alternatively, you could rely on automation (such as simp or decide) if those tactics are strong enough to close these subgoals.

──────────────────────────────────────────────
Conclusion and Direction for Fixing

The root cause of the error is that in your proof you left “_” placeholders for arguments that Lean cannot automatically fill. Specifically, in your call to Nat.mod_lt, you need to supply the value of n explicitly (and similarly for Nat.zero_le). To fix the error, change your proof bullet lines to pass these arguments explicitly. For example:

 theorem lastDigit_spec_satisfied (n : Nat) :
  lastDigit_spec n (lastDigit n) := by
  unfold lastDigit lastDigit_spec
  simp
  apply And.intro
  · exact Nat.zero_le (n % 10)
  · exact Nat.mod_lt n 10 (by decide)

This ensures Lean has all the necessary information to verify the proof.