Below is a step‐by‐step analysis of what went wrong in your proof. (Note that we assume you intended to “case‐split” on the decidable proposition a ≤ min b c and then simplify the “if” expression accordingly.) The error message

  unsolved goals … 
  ⊢ ((if a ≤ b ∧ a ≤ c then a else b ⊓ c) …)

tells us that after unfolding the definitions, Lean still has “if … then … else …” expressions in the goal that haven’t been eliminated. In our case the error arises from two issues in the proof.

───────────────────────────── 
1. Failing tactic: Misuse of “if_pos” and “if_neg”

In your first branch you write

  split
  · apply if_pos; apply le_min
  · apply if_neg
  · apply if_neg

Here you intend to prove that the returned number is less than or equal to a, b, and c respectively. But note that the “if … then … else …” definition makes the goal depend on the condition “a ≤ min b c”. When you call “apply if_pos” or “apply if_neg,” you are expecting to immediately “replace” the expression by one of its branches. However, the lemmas that do this (usually called if_pos and if_neg) have type roughly like

  if_pos {α : Sort u} {t : Prop} [Decidable t] (x y : α) (h : t) :
    (if t then x else y) = x

which is only useful if you already know t holds (or does not hold, respectively). In your proof you call “apply if_neg” without having any hypothesis of the form ¬ (a ≤ min b c) in that branch. In short, the tactics “if_pos” and “if_neg” are being applied without the proper (or any) evidence for the truth or falsity of the condition, leaving Lean with unsolved subgoals.

───────────────────────────── 
2. Proof state and mismatch with the specification

After you do “unfold minOfThree minOfThree_spec” and “simp [min_assoc]”, the goal still contains an “if” expression (shown by Lean as “if a ≤ b ∧ a ≤ c then a else b ⊓ c”). Notice that (after simp) the “min” is being printed as “⊓” because Lean’s Mathlib may have an overload of min from the lattice structure. (This is not the core of the error but it may cause confusion.) 

Your subsequent proof then immediately “split” the conjunction. In the first half you try to prove that the result is ≤ a, ≤ b, and ≤ c. Since the definition is “if a ≤ min b c then a else min b c”, you must argue by a case‐split on whether a ≤ min b c holds. However, you apply “apply if_pos; …” and “apply if_neg; …” without first “by_cases” on that condition; so Lean cannot decide which branch you mean—in effect, the if-expression remains “stuck.”

───────────────────────────── 
3. Incorrect assumptions and type issues

Because you don’t provide the needed hypotheses (for example, a proof of a ≤ min b c or its negation), Lean does not know which branch of the “if” to take. In the tactic “apply if_pos; apply le_min”, your use of “le_min” (which normally expects two proofs that a is ≤ some values) is intended to supply the needed hypothesis for if_pos but does not match the structure of your if-expression. Similarly, “apply if_neg” is used without providing a witness of ¬ (a ≤ min b c).

Also, the specification in minOfThree_spec expects the result to be one of a, b, or c. But your proof for the second part (the disjunction) also uses “if_neg” in a way that does not correctly dispatch the “if … then … else …” to its proper branch.

───────────────────────────── 
4. Alternative proof strategy

A better strategy is to perform a case analysis on the condition a ≤ min b c at the very beginning. For example, you could start with:

  by_cases h : a ≤ min b c
  
and then:
  
  • In the case h is true, simplify using the lemma if_pos h, so that minOfThree a b c reduces to a. Then proving the inequalities and disjunction is trivial.
  
  • In the case h is false, simplify using if_neg h so that minOfThree a b c reduces to min b c, and then prove that min b c is ≤ a, b, and c and is equal to either b or c.

This case analysis would “remove” the if-expression by replacing it with one of its branches, leaving a goal that directly matches the specification.

───────────────────────────── 
5. Root cause and direction for fixing

To summarize, the root issue is that you are trying to “apply” the if_pos/if_neg elimination lemmas without first establishing which branch of the if-expression is active. This results in unsolved goals (the “if … then … else …” remains unevaluated) and a mismatch with your specification statement. The tactic calls “apply if_pos” and “apply if_neg” are misused because they require an extra hypothesis (or decision) about the condition, and you are not providing it.

To fix the proof, consider the following outline:

  1. Begin with a “by_cases h : a ≤ min b c” to split into the two cases.
  2. In the case when h holds, use “rw if_pos h” to rewrite minOfThree a b c as a. Then show that a ≤ a, a ≤ b, and a ≤ c using suitable facts (for instance, a ≤ b and a ≤ c follow from h and properties of min, assuming you have the correct lemmas).
  3. In the case when h does not hold, use “rw if_neg h” so that your definition becomes min b c. Then prove that min b c is below a, b, and c and that min b c equals either b or c.
  
Following this approach will give Lean the necessary structure to simplify the “if” and help you dispatch all the cases properly.

───────────────────────────── 
Conclusion

The error is due to misusing the if-elimination lemmas (if_pos and if_neg) without first doing a case split on the condition a ≤ min b c. The proof tries to “apply” these lemmas without providing the needed hypotheses, leaving unsolved goals. The remedy is to explicitly perform a “by_cases” on the condition and then use rewriting (rw if_pos h or rw if_neg h) accordingly, so the branches of the “if” become concrete and match the specification.