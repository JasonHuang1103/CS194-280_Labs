Below is a step‐by‐step analysis of what is going wrong in your proof and some possible directions for fixing it.

──────────────────────────────
1. Identify which tactic is failing and why

The error message shows two problems:
 • In each branch of your case split (one for a < b and one for a ≥ b), Lean complains that there are “unsolved goals.”
 • Later, Lean reports an “unexpected token ‘·’” error.

The tactic “cases' lt_or_ge a b with h h” is meant to do a case split on the classical dichotomy “a < b ∨ a ≥ b”. In each branch you immediately use the bullet notation “·”. The error indicates that when Lean reaches one of these branches, the goal is not fully simplified and the subsequent “simp [h]” (and then the “exact …” lines) do not fully discharge the goal. Moreover, Lean is also unhappy with the bullet syntax (the “·”) possibly because of the nested indentation or because it isn’t expecting that token at that point in the “by …” block.

──────────────────────────────
2. Consider the proof state at that point

After unfolding the definitions with “unfold myMin myMin_spec”, the goal becomes
 ((if a ≤ b then a else b) ≤ a ∧ (if a ≤ b then a else b) ≤ b) ∧ ((if a ≤ b then a else b) = a ∨ (if a ≤ b then a else b) = b).

Now, when you do “cases' lt_or_ge a b with h h”, you produce two subgoals:
 • In the first branch, h is a proof of a < b.
 • In the second branch, h is a proof of a ≥ b.
In each branch the “if a ≤ b then a else b” is supposed to “reduce” (via the test on a ≤ b), but your “simp [h]” does not force Lean to do the evaluation of the if–then–else correctly in the presence of the given hypothesis. The unsolved goals indicate that Lean still “sees” an if expression in the goal and cannot combine the information coming from h with the condition of the if.

──────────────────────────────
3. Check if the proof approach matches the specification

Your specification is that myMin must be less than or equal to both a and b and that it equals either a or b. Your overall approach—splitting on whether a < b or a ≥ b—is appropriate. However, when the if–then–else is unfolded, you must ensure that Lean “knows” which branch of the if is taken. In the branch where you assume a < b, you must supply a proof that a ≤ b so that Lean can rewrite “if a ≤ b then a else b” into “a”, and similarly for the other branch. The tactic “simp [h]” is likely not doing that job (especially because in the first branch you only have a < proof, not a direct proof of a ≤ b). Although you do later supply the conversion with “le_of_lt h”, this might not be enough. 

Also, use of the bullet notation (the “·”) must be done at the proper nesting level because an “unexpected token ‘·’” means that the bullet is not in the context Lean expects.

──────────────────────────────
4. Identify any type mismatches or incorrect assumptions

One subtle point is that your if–then–else condition is “a ≤ b” while your case analysis produces a proof of “a < b” (in the first case) and “a ≥ b” (in the second). In the first branch, you convert a < b to a ≤ b by using “le_of_lt h,” but there is an extra step of rewriting needed in your if‐expression. The lack of rewriting leaves unsolved portions of the goal. Also, note that if the “simp” tactic does not know that “a < b” implies “a ≤ b” in the context of the if–then–else simplification, it might fail to simplify the if statement.

Finally, the bullet notation “·” is causing a parser error (“unexpected token”). This is usually due to a mis‐indentation or mis‐placement of the bullet. Lean 4’s bullet system is sensitive to how and where the bullets are placed relative to the “by” block.

──────────────────────────────
5. Consider alternative proof strategies

A couple of different strategies might help:
 • Instead of unfolding both definitions and then doing a case split on lt_or_ge, you could case split directly on “if a ≤ b then a else b” by using a tactic like “if_tac” or “split_ifs” to force the evaluation of the if–then–else. This way the goal will be rewritten immediately according to the condition.
 • Alternatively, you might want to ensure that in the branch where a < b holds, you explicitly convert that into a proof of a ≤ b (for example, by writing “have : a ≤ b := le_of_lt h” before calling simp).
 • Finally, ensure that the bullet notation is correctly indented. Sometimes using a “begin … end” block or using nested tactic blocks helps the formatter recognize the bullets correctly. In some Lean 4 versions or settings, you might need to use “by · …” in the proper context.

──────────────────────────────
Conclusion: Detailed Analysis of the Root Cause and Fix Direction

The root issues are twofold:
 1. The use of bullet notation (“·”) in your “by” block appears to be mis‐indented or misplaced and does not match Lean 4’s expected structure. This leads to the “unexpected token ‘·’” error.
 2. The tactic “simp [h]” (and the subsequent “exact …” lines) does not fully discharge the goal because the unfolding of the if–then–else expression (depending on a ≤ b) is not completely simplified using the current hypotheses. In particular, the case when you have a < b only supplies a strict inequality while the if statement tests a ≤ b.

A good direction for fixing the proof is to:
 • Use tactics that explicitly rewrite the if–then–else. For example, you might try “split_ifs” which tells Lean to consider each branch of the if.
 • Alternatively, set up the case distinction on the condition (a ≤ b) itself rather than on lt_or_ge.
 • And finally, ensure that you format your bullet notation correctly (or use a nested “begin … end” to keep each branch properly separated).

An example alternative might be:

-----------------------------------------------------------
theorem myMin_spec_satisfied' (a b : Int) :
  myMin_spec a b (myMin a b) := by
  unfold myMin myMin_spec
  split_ifs with h
  · -- In this branch, h : a ≤ b holds.
    exact ⟨le_refl _, le_of_not_gt h, Or.inl rfl⟩
  · -- Here, we have ¬ (a ≤ b), so a > b, which implies a ≥ b.
    have h' : b ≤ a := by linarith
    exact ⟨h', le_refl _, Or.inr rfl⟩
-----------------------------------------------------------

In this version the “split_ifs” tactic explicitly dispatches the if–then–else cases, and the bullet notation is used in the proper structure.

──────────────────────────────
Final Answer

The error is due to a combination of problems:
 – You are applying a case analysis on lt_or_ge a b and then using bullet notation (“·”) in a way that Lean 4’s parser does not expect (hence “unexpected token ‘·’”).
 – In each branch, the “if a ≤ b then a else b” is not simplified enough given your current hypothesis – for example, in the a < b branch you only have a proof of a < b (and not directly a proof of a ≤ b) so that simp [h] leaves unsolved parts of the goal.
To fix the error, consider rewriting the goal using tactics (like split_ifs) that force evaluation of the if–then–else based on its condition or restructure your case split so that the if condition is directly handled. Also, ensure that bullets are properly indented so that Lean recognizes them as subgoal delimiters.