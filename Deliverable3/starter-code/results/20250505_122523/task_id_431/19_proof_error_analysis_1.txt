Below is an explanation of what went wrong and a hint on how to fix it.

───────────────────────────────────────────── 
Overview of the issue

The Lean 4 file you posted does not “only contain Lean code” but rather a mix of Lean code and free‐form (non–Lean) text. For example, after the implementation of hasCommonElement you’ve pasted additional natural–language text (including the “Alternatively…” paragraph and the long chunk of text about machine learning) into the same file. When Lean parses the file it sees those parts as code (or tokens), and that causes the following kinds of errors:
 
• “function expected at a.toList.any fun x => b.toList.contains x”  
• “unexpected token ','; expected command”  
• “unknown constant 'List.mem_toList'”  
• “simp made no progress”

In short, the parser is getting confused by unstructured text that is not commented out.

───────────────────────────────────────────── 
Detailed analysis

1. Error “function expected at  
  a.toList.any fun x => b.toList.contains x”
 – When Lean sees this line, it is expecting a function to be applied to some argument. Although the syntax
  (a.toList).any (fun x => (b.toList).contains x)
 is perfectly acceptable as Lean code, if there is any extra text (or if the file’s structure is off because natural–language text is included outside of comment delimiters) the parser’s state may already be “off” and then misinterpret even correct function application.
 
2. Error “unexpected token ','; expected command”
 – This type of message usually appears when Lean encounters text that looks like it might belong to a proof script (e.g. a comma in “use [i, j]”) but isn’t in the proper syntactic context (perhaps because the parser is already confused by previous extraneous text).

3. Error “unknown constant 'List.mem_toList'”
 – In the proof you refer to List.mem_toList. In mathlib (or Lean’s standard library) there is no constant by that name. (It seems you intended to use the theorem stating that an element is in the list obtained via Array.toList if and only if it is in the array – or rather, that Array.toList produces a list whose membership predicate is equivalent to the array’s indexing condition.) This again may be caused by a mistaken copy–paste or by the fact that the file contains free–form commentary that has been “parsed” incorrectly.

4. Error “simp made no progress”
 – This error is not fundamental but indicates that one of your simp calls did not simplify anything. It may be a side–effect of the other problems (or the simp lemmas may simply not be set up as expected).

─────────────────────────────────────────────  
The root cause

The root cause is that extra text (including alternative code suggestions and long commentary paragraphs) is included in a file that Lean is trying to compile. In Lean, the source file must be entirely valid Lean code; any commentary/text that is not code must be placed inside comments (using “--” for single–line or “/– … –/” for block comments) or in doc–strings.

─────────────────────────────────────────────  
Direction for fixing the issue

• Remove or comment out all non–Lean text. For example, change

  Alternatively, you could write it without the extra parentheses …

to something like

  /– Alternatively, you could write it without the extra parentheses as: –/
  /– def hasCommonElement (a : Array Int) (b : Array Int) : Bool :=
    List.any a.toList (fun x => List.contains (b.toList) x)
  –/

• Make sure that any additional commentary is wrapped in proper comments (using “--” for single–line or block comments “/– … –/”).

• Verify that all function or theorem names you reference (e.g. List.mem_toList) are available in the imported libraries. Possibly you meant a membership lemma such as List.mem_toList or the proper name for the theorem that relates Array.toList and the array’s indexing.

Once the file is cleaned up and all natural language text is either placed in comments or removed, Lean will be able to parse the code on its own and the errors (caused by stray text interfering with parsing) should vanish.

─────────────────────────────────────────────  
Summary

The error messages are not due to a logical flaw in your proof but are caused by mixing Lean code with extra natural–language commentary that isn’t commented out. The Lean parser gets tripped up by this extraneous text, leading to “function expected”, “unexpected token”, and similar errors. To fix the file, move all non–Lean text inside proper comment delimiters so that Lean sees only valid code.

This cleanup should allow your theorem and its proof to be processed correctly.