let xs := a.toList
induction xs with
| nil =>
    simp
| cons x xs ih =>
    simp only [List.foldl, List.length_cons, Nat.succ_eq_add_one, List.get_cons_zero, List.get_cons_succ] at *
    constructor
    路 intro h i hi
      cases i with
      | zero => exact h.1
      | succ i =>
        exact h.2 i (Nat.lt_of_succ_lt_succ hi)
    路 intro h
      constructor
      路 exact h 0 (Nat.zero_lt_succ _)
      路 intro i hi
        exact h (i + 1) (Nat.succ_lt_succ hi)