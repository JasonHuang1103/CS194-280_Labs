Below is a walk‐through of our reasoning process together with a plan for writing both the Lean function and its accompanying proof. We explain each step in detail.

───────────────────────────────  
1. Understanding the function specification

 • The function is called hasCommonElement and it takes two arguments: arrays a and b (both of integers).  
 • It must return true if there exists an element in a that is also in b; otherwise (or if at least one array is empty) it returns false.

───────────────────────────────  
2. Breaking down the problem into smaller subproblems

 • We need a way to check if an array contains a given element. Fortunately, Lean’s Array usually provides a helper (for instance, b.contains x) that returns true if x is in b.  
 • Next, we need to “scan” array a to see if any element x satisfies that b contains x. Lean provides an “any” function (a.any ...) that runs a predicate over the elements of a and returns true if the predicate holds for any element.  
 • Thus, our function can be defined as:  
  hasCommonElement a b := a.any (λ x, b.contains x)

───────────────────────────────  
3. Considering input types, edge cases, and expected behavior

 • Input types: Both a and b are arrays of Int.  
 • Edge cases:  
  – If a is empty, then a.any returns false and our function correctly returns false (no common element).  
  – Similarly, if b is empty, then b.contains x would be false for every x so the overall result is false.  
 • The expected behavior exactly matches our simple usage of a.any.

───────────────────────────────  
4. Choosing appropriate proof techniques and structure

 We need to prove the theorem:

  (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ hasCommonElement a b

To prove this, we will use the following plan:
 
 • First, note that by definition our hasCommonElement is a.any (λ x, b.contains x).  
 • Unfold the definition of a.any. In Lean, a.any f is logically equivalent to:  
  ∃ i, i < a.size ∧ f (a[i]!)
 • Then, using the definition of b.contains, we see that b.contains x is equivalent to:  
  ∃ j, j < b.size ∧ b[j]! = x  
 • Combining these two equivalences, we see that:  
  a.any (λ x, b.contains x)  
  ↔ (∃ i, i < a.size ∧ (∃ j, j < b.size ∧ b[j]! = a[i]!))  
  ↔ ∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!  
 • Formalize this by unfolding the function definitions and applying logical rewrites.  
 • Use tactics like unfold and simp (or custom rewrites) to bridge the gap between the definition of any/contains and our desired specification.

───────────────────────────────  
5. Similar patterns from previous examples

 • This “exists over indices” pattern is common when relating the result of a “check” function (using any) to an explicit existential quantification over the array indices.
 • Previous proofs that relate list.any or array.any to an existential statement in Lean guide the structure of our proof.

───────────────────────────────  
Detailed Plan for Implementation and Proof

A. Implementation Plan for hasCommonElement

 • Define hasCommonElement by scanning the first array a. Use the Array.any method with the predicate (λ x, b.contains x).  
 • This neatly captures that the function returns true if and only if there exists an x ∈ a that is also contained in b.

The implementation will look like:

-----------------------------------------------------------------
def hasCommonElement (a : Array Int) (b : Array Int) : Bool :=
  a.any (λ x => b.contains x)
-----------------------------------------------------------------

B. Proof Plan for hasCommonElement_spec_satisfied

 • Start by unfolding the definitions of hasCommonElement and hasCommonElement_spec.  
 • Show that a.any (λ x, b.contains x) is equivalent to ∃ i, i < a.size ∧ (b.contains (a[i]!)).  
 • Then use the definition of b.contains to prove that b.contains (a[i]!) is equivalent to ∃ j, j < b.size ∧ (a[i]! = b[j]!).  
 • Conclude by combining the existentials to obtain ∃ i j such that i < a.size, j < b.size, and a[i]! = b[j]!.  
 • The proof can be structured with sufficient use of logical connectives and perhaps helper lemmas if desired.

A sketch in Lean might use tactics similar to:

-----------------------------------------------------------------
theorem hasCommonElement_spec_satisfied (a : Array Int) (b : Array Int) :
  hasCommonElement_spec a b (hasCommonElement a b) := by
  -- Unfold definitions of hasCommonElement and its spec.
  unfold hasCommonElement hasCommonElement_spec
  -- Show that a.any (λ x, b.contains x)
  --   is equivalent to
  --   ∃ i, i < a.size ∧ (∃ j, j < b.size ∧ a[i]! = b[j]!)
  -- Then combine the existentials.
  sorry
-----------------------------------------------------------------

In the final version, you would replace the "sorry" with the detailed proof steps.

───────────────────────────────  
Conclusion

We have broken the whole task into the following steps:

1. Understand the check: We require a Boolean that is true if and only if the two arrays have at least one common element.  
2. Decompose the problem: Use Array.any on a together with b.contains.  
3. Consider edge-cases: Empty arrays are automatically handled (any returns false when there is nothing to scan).  
4. Develop a proof strategy: Unfold the definitions, reduce a.any to an existential over indices and similarly for b.contains, and combine to reach the desired specification.  
5. Recognize similar patterns: This structure is common in proofs that relate “exists” conditions with “any” predicates.

This plan provides a clear roadmap for writing both the Lean function and proving its specification.