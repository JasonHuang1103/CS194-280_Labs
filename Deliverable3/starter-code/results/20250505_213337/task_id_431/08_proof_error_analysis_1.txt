Below is a detailed walkthrough of what’s going wrong with the proof and why Lean reports unsolved goals, followed by a suggestion on how to proceed.

──────────────────────────────
1. Identifying the Failing Tactic

• The error message points at an “unsolved goal” after the tactics
  unfold hasCommonElement hasCommonElement_spec
  simp
 – After these commands, the current goal becomes an equivalence between two different forms:
  (∃ i < a.size, ∃ x < b.size, a[i]! = b[x]!) ↔ ∃ i, ∃ (h : i < a.size), a[i] ∈ b

• This equivalence is not “obviously” true to Lean, and the chosen simp (and later, constructor) tactic does not automatically bridge that gap.

──────────────────────────────
2. Considering the Proof State at the Failing Point

• After unfolding the definitions, the goal becomes something like
  (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ <boolean value>
  or, after simp, an equivalence between an existential statement stated in terms of indices and equality versus one stated using membership (∈).

• The error message makes it clear that Lean still faces the task of proving that
  (∃ i < a.size, ∃ x < b.size, a[i]! = b[x]!)
 is equivalent to 
  (∃ i, ∃ (h : i < a.size), a[i] ∈ b).

• In other words, the “bridging” lemmas (like Array.any_iff_mem and Array.contains_eq) are not automatically applied in your current proof state.

──────────────────────────────
3. Checking if the Proof Approach Matches the Specification

• Your specification predicate, hasCommonElement_spec, is stated as
  (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ result
 where result is the Boolean produced by your function.

• In your proof you try to relate the “any” version (using b.contains and Array.any_iff_mem) to the existential version in the spec.

• However, the proof mixes two representations:
  – One “side” uses “∃ i, a[i]! ∈ b” (where membership is defined using the existence of an index satisfying a condition).
  – The other “side” uses “∃ i j, i < size ∧ …”
 so they aren’t syntactically the same from Lean’s point of view, and the simp tactic doesn’t know how to convert one to the other automatically.

──────────────────────────────
4. Identifying Type Mismatches or Incorrect Assumptions

• There is a mismatch between how the implementation (using b.contains and a.any) is phrased and how the specification is written (using explicit indices and proofs that an index is in range).

• Notice also a possible typo:
  "use i, Array.indexOf o hx, hi"
 It appears that “Array.indexOf o hx” probably was meant to be something like “Array.indexOf b hx” (or with another correct argument) so that you recover the index in b that verifies membership.
 Any typo or misapplication in calling a library function (like using a stray “o”) could easily break the type-checking and tactic execution.

• Moreover, the conversion between a Boolean (result of contains/any) and a logical proposition (an existential statement) is not transparent. You must manually rewrite one form into the other (for example, by using Array.any_iff_mem and Array.contains_eq) so that Lean sees the equivalence.

──────────────────────────────
5. Considering Alternative Proof Strategies

• A more reliable strategy would be to work directly with the rewriting lemmas:
  – Use “rw Array.any_iff_mem” to convert the boolean “any” into an existential statement,
  – Then, use “rw Array.contains_eq” to connect the fact that “x ∈ b” is equivalent to “∃ j, j < b.size ∧ b[j]! = x.”
 By doing these rewrites, you help Lean transform both sides of the ↔ into equivalent forms.

• Alternatively, you could split the proof into two separate goals (one for →, one for ←) and manually apply these rewriting steps in each branch. This more verbose approach can make clear exactly which equivalence is being used and may help avoid the “unsolved goal” error.

──────────────────────────────
Conclusion and Root Cause Analysis

The root cause of the error is that after unfolding and simp, the goal is an equivalence (↔) between two statements that are “logically equivalent” but written in different forms. Lean does not automatically see that
  (∃ i < a.size, ∃ x < b.size, a[i]! = b[x]!)
is the same as
  ∃ i, ∃ (h : i < a.size), a[i] ∈ b.
This is compounded by a possible typo in the call to Array.indexOf (using “o” instead of the correct parameter).

──────────────────────────────
Suggested Direction for Fixing the Proof

1. Make sure you use the correct functions and parameters. For example, ensure that Array.indexOf is called with the correct argument (likely “b” instead of “o”).

2. Explicitly rewrite the definitions using available lemmas. For example:
  • Begin by rewriting the goal with “rw Array.any_iff_mem” to convert a.any into ∃ x, x ∈ a ∧ b.contains x.
  • Then apply “rw Array.contains_eq” to unpack the membership test on b.
  In doing so, the existential statements on both sides will match more closely.

3. Instead of relying on simp to bridge the gap, manually split the equivalence into its two directions and use the rewriting steps in each branch. This will give you more control over the proof state and help Lean finish the goals.

By following these suggestions, you should be able to guide Lean from the boolean formulation of your function toward the existential formulation required by your specification, thereby eliminating the unsolved goal error.

Happy proving!