Below is a step‐by‐step analysis of what’s going wrong in the proof, why Lean is “unsolving” one of the cases, and a suggestion on how to fix it.

──────────────────────────────
1. Identifying the Failing Tactic

• The error message indicates that the problem appears when using the tactic “split_ifs”. In particular, Lean complains that in one of the cases (the “isTrue” branch) there is an unsolved goal.  
• Moreover, later on Lean produces an “unexpected token ‘·’” error. This tells us that the bullet (“·”) notation is not lining up with the intended structure in the tactic proof.

──────────────────────────────
2. Considering the Proof State at the Error

• The theorem’s goal (after unfolding) becomes a conjunction:  
  ((if a ≤ b then a else b) ≤ a ∧ (if a ≤ b then a else b) ≤ b) ∧ ((if a ≤ b then a else b) = a ∨ (if a ≤ b then a else b) = b).

• After the initial “split” the proof produces *two subgoals*:  
  – One for proving (if … then … else …) ≤ a ∧ (if … then … else …) ≤ b.  
  – One for proving the disjunction (if … then … else …) = a ∨ (if … then … else …) = b.

• In the first subgoal you use “split_ifs with h” which will do a case analysis on the conditional “if a ≤ b then a else b”. In the “isTrue” branch (where h : a ≤ b) the goal should simplify to proving a ≤ a ∧ a ≤ b. You then give “exact ⟨le_refl a, h⟩” which seem to correctly prove that branch.  
  – In the “isFalse” branch, you similarly provide a proof (by showing b ≤ a and b ≤ b).

• The same idea is then used in the second subgoal for the disjunction; again a “split_ifs” is invoked.  
  The intended idea is: if a ≤ b then the result is a (so “a = a” holds) and if not then the result is b (so “b = b” holds).

──────────────────────────────
3. Checking the Matching of the Proof Approach to the Specification

• The overall idea is correct: you unfold the definitions, split on the outer conjunction, and then use “split_ifs” in each part to handle the if‐expression.  
• However, since the same “if” expression appears twice (once in each conjunct), Lean’s tactic “split_ifs” is used twice in succession at different “bullet” levels.

──────────────────────────────
4. Detecting Type Mismatches or Incorrect Assumptions

• One issue is that in the “isTrue” branch of the left conjunct the exact term “⟨le_refl a, h⟩” produces a proof for a pair (a ≤ a, a ≤ b). This is correct for the left conjunct alone.  
• In the right conjunct, the term “Or.inl rfl” (or “Or.inr rfl”) correctly produces a proof for the disjunction.  
• However, the error message “unsolved goal” shows that one branch of the outer “split” is not discharged.  
• The “unexpected token ‘·’” error suggests that the bullet structure (indentation and block level) is not being parsed as intended. In Lean tactics, bullets (“·”) or dash (“-”) annotations must align properly with the nested blocks.  
• In our proof, the bullets following “split_ifs” might be placed at a lower or higher indentation level than Lean’s parser expects. This mis-indentation can cause one branch (or even one “split_ifs” case) to remain “open” as an unsolved goal.

──────────────────────────────
5. Considering Alternative Proof Strategies

• One straightforward remedy is to avoid double-nesting “split_ifs” with bullets that might be mis-indented. Instead you can:
  – Use “if h : a ≤ b then … else …” manually to do the case analysis, or
  – Use “by cases” on the condition (a ≤ b) once at a higher level, and then split the proof for the two subgoals.
• Alternatively, restructure the proof by collapsing the two subgoals into one “match” or “cases” block for the entire goal rather than repeating “split_ifs” separately for the left and right parts of the conjunction.
• Also, be sure to check the indentation: every bullet (“·”) must be at the correct nesting level so that Lean knows when each tactic block begins and ends.

──────────────────────────────
Detailed Analysis of the Root Cause

The error originates from a mismanagement of tactic blocks. Specifically:
 – After unfolding the definitions and splitting the outer conjunction, you use “split_ifs” for the first subgoal with a bullet, and then you start a second “split_ifs” for the second subgoal without re–aligning the bullet notation as required by Lean 4.
 – As a result, Lean does not “close” the nested case analysis properly and interprets the next bullet (“·”) at an unexpected level. This causes a case (like “isTrue”) to remain unsolved, and subsequently, Lean encounters an unexpected token where it expected a new command.
 – The unsolved goal in the “isTrue” branch is a symptom of this breakdown: even though the intended proof in that branch appears correct, the overall structure of case splits and bullets is off.

──────────────────────────────
Suggested Direction for Fixing

• Reorganize the proof so that the bullet annotations correctly reflect the structure. One way is to separate the case analyses for the two conjuncts. For instance, you might write:
  unfold myMin myMin_spec
  split
   – { -- first subgoal
      by_cases h : a ≤ b,
      { exact ⟨le_refl a, h⟩ },
      { have : b ≤ a := Int.le_of_lt (Int.lt_of_not_ge h),
        exact ⟨this, le_refl b⟩ } },
   – { -- second subgoal
      by_cases h : a ≤ b,
      { exact Or.inl rfl },
      { exact Or.inr rfl } }  
• In this version the “by_cases” (which is essentially the same as “split_ifs” for booleans) clearly delineates the two cases with explicit braces and proper indentation.
• Alternatively, if you wish to stick with “split_ifs”, make sure that each branch is indented within its corresponding case block and that you “close” the inner blocks before starting a new outer bullet.

──────────────────────────────
Conclusion

The root cause of the error is a misapplication of bullet structure with “split_ifs”: the mixed indentation and nested tactic blocks lead Lean to leave one case – notably the “isTrue” branch – unsolved, and then find an unexpected bullet token. The remedy is to rearrange the proof either by using “by_cases” with careful indentation or by restructuring the nested “split_ifs” so that the bullet levels correctly match the intended nested blocks. This will discharge all subgoals and allow Lean to parse the proof correctly.

By reformatting the proof as suggested, you can resolve the unsolved goals and unexpected token error.