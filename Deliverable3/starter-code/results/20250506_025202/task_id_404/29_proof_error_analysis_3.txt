Below is a step‐by‐step analysis of what’s going wrong in your proof and some suggestions for a fix.

────────────────────────
1. Which tactic is failing and why

The error message comes from the bullet “·” notation. (In Lean 4 the dot bullet “·” is still allowed, but its placement must be exactly right.) When you do

  by_cases h : a ≤ b

Lean splits your goal into two cases. In each case you then open a “bullet block” with “·”. The error message “unexpected token '·'; expected command” indicates that Lean is not expecting the bullet at that point. This usually happens when the indentation or grouping of tactics is off so that Lean does not recognize that you are starting a new case rather than continuing the previous tactic.

────────────────────────
2. What is the proof state at that point?

After the “unfold myMin myMin_spec” step the goal becomes
  ((if a ≤ b then a else b) ≤ a ∧ (if a ≤ b then a else b) ≤ b) ∧
  ((if a ≤ b then a else b) = a ∨ (if a ≤ b then a else b) = b)

Then “by_cases h : a ≤ b” splits this into two subgoals:
 • In the first case (when h : a ≤ b holds) the “if” simplifies to a so the goal is
  ((a ≤ a ∧ a ≤ b) ∧ (a = a ∨ a = b)).
 • In the second case (when h : ¬ (a ≤ b) holds) the “if” simplifies to b so the goal is
  ((b ≤ a ∧ b ≤ b) ∧ (b = a ∨ b = b)).

In each branch you must end with a complete proof. Lean’s tactic state now expects that the bullet-ed blocks are well structured to solve these two goals separately.

────────────────────────
3. Does the proof approach match the specification?

Yes, your overall approach is reasonable. You want to prove that myMin returns either a or b and that it is less than or equal to both operands. Splitting into cases by “a ≤ b” is a correct strategy. In each branch you then provide a proof of the relevant conjuncts. (For example, in the “h : a ≤ b” branch you prove a ≤ a by reflexivity and a ≤ b using h, and in the disjunction you show a = a.)

────────────────────────
4. Are there any type mismatches or incorrect assumptions?

There’s no type mismatch in the logical part of your proof. However, the way you use bullets in this Lean 4 proof is where the problem lies. Lean 4 is sensitive to indentation and bullet placement. In your script the bullet “·” is not recognized exactly where you expect it, so Lean complains about “unsolved goals” (that is, it thinks a subgoal remains open) and an “unexpected token '·'”. In short, the splitting into cases is correct in spirit, but the bullet syntax makes Lean “lose track” of where one subproof begins or ends.

────────────────────────
5. Alternative proof strategies

One way to avoid these issues is to not rely on the “·” bullet notation and instead use braces to delimit the proof cases. For example, after “by_cases h : a ≤ b” you could write:

  by_cases h : a ≤ b with
  | inl h₁ =>
     -- proof when a ≤ b: you can use tactics with proper indentation
     apply And.intro
     · exact ⟨le_refl a, h₁⟩
     · exact Or.inl rfl
  | inr h₂ =>
     -- proof when a > b:
     have h' : b ≤ a := Int.le_of_lt (Int.lt_of_not_ge h₂)
     apply And.intro
     · exact ⟨h', le_refl b⟩
     · exact Or.inr rfl

Alternatively, you can keep the “by_cases” and use explicit braces or “begin … end” blocks ensuring correct indentation.

────────────────────────
Conclusion and Recommendation

The root cause is that Lean is not recognizing the “·” bullet markers as you intend—this is almost certainly a formatting/indentation issue. Lean 4’s tactic blocks and bullet notation are very sensitive to white space; the bullets must be indented correctly relative to their parent tactic (in this case the “by_cases”) so that Lean knows which subgoal they are meant to solve.

To fix the error:

• Ensure that after “by_cases h : a ≤ b” you correctly delimit the two cases. For instance, you might place each case’s tactics inside an indented block or use the “with” notation.
• Alternatively, remove the bullets and use “begin … end” blocks for each case, thereby making the structure explicit.

Correcting the bullet indentation (or replacing bullets with more explicit structure) should resolve both the “unsolved goals” and the “unexpected token '·'” errors you are seeing.

By focusing on adjusting the indentation/bullet grouping, you will steer Lean into recognizing that each subgoal is completely solved by its proof block.