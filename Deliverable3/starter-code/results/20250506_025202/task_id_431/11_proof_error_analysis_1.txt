Below is an analysis of what’s going wrong with the proof. I’ll explain step‐by‐step:

─────────────────────────────  
1. tactic “failure” and how the bullet markers cause the problem

The error message says, among other things, “unexpected token ‘·’; expected command” and “unsolved goals … case mp … case mpr”. In Lean you can use bullet markers (such as “·”) to structure proofs. However, Lean is very “sensitive” to the indentation and layout. In the proof above the bullets (the “·” symbols) are not correctly parsed. (Sometimes extra spaces or a mismatch of indentations means Lean sees a stray “·” where it was expecting a tactic command.) In other words, one of the bullets is misplaced, so Lean is “unexpected” to see it. (In our case the line with “· rintro ⟨i, j, hi, hj, heq⟩” is parsed as not beginning a new tactic block properly.)

─────────────────────────────  
2. What is the proof state at that point?

When you write

  apply Iff.intro

you split the goal into proving both directions of the “↔”. Lean now has two (sub)goals:
• The “mp” direction (i.e. you have to show that from (∃ i j, …) you can conclude that (a.any … = true)); and
• The “mpr” direction (the reverse implication).

Inside each branch you attempt to use tactics like “intro”, “obtain” and “rintro”. However, because the bullet markers are not recognized due to their indentation (or unexpected placement), Lean does not “enter” those branches properly. As a result the proof script is “left with unsolved goals” and a stray bullet token.

─────────────────────────────  
3. Does the proof approach really match the specification?

The theorem is trying to show that the boolean result of hasCommonElement is equivalent to the existence of some indices i and j such that a[i]! = b[j]!. In other words, you want to use the lemmas (namely, Array.any_iff) that “unpack” the meaning of a.any returning true. In spirit the approach is correct. (That is, if the boolean is true, then by Array.any_iff you have an index in a and then an index in b. And vice‐versa.)

However, the specification equates a proposition with a Boolean truth “= true”. (Recall that Lean represents “Bool” differently from “Prop”.) One must be a bit careful; in such equivalence proofs you have to “unfold” both definitions and use the appropriate lemmas. In your case you are indeed “unfolding” hasCommonElement and hasCommonElement_spec in the first line, so that part is on the right track.

─────────────────────────────  
4. Are there any type mismatches or incorrect assumptions?

A potential pitfall appears when using the lemma Array.any_iff. You expect:
  a.any p = true ↔ (∃ i, i < a.size ∧ p (a[i]!))
but you have nested applications:
  a.any (λ x => b.any (λ y => decide (x = y))).
Each use of Array.any_iff “converts” a Boolean result into an existence statement. In the first branch you write:
  obtain ⟨i, hi, hik⟩ := Array.any_iff.mp h
then again
  obtain ⟨j, hj, hjk⟩ := Array.any_iff.mp hik
so you turn the boolean guard into “∃ i: …” statements. (This is fine provided that the lemma is exactly as expected.)  
If however the definitions (especially the use of decide inside the inner any) have changed their form or if there is a mismatch between Bool and Prop, Lean might find “unsolved goals” when it expects to solve the equivalence. In our case the unsolved goals reported by Lean (“case mp …” and “case mpr …”) indicate that the equivalence is not entirely discharged.

─────────────────────────────  
5. Alternative proof strategies

A couple of things can be considered:
 • Fixing the bullet syntax: Instead of using “·” markers, you might try to use the “by { … }” block or the “begin … end” style for each branch. For example, after “apply Iff.intro” you could write
  { intro h, … } and then
  { rintro ⟨i, j, hi, hj, heq⟩, … }  
 This can sometimes help Lean parse the intended nested structure.
 • Check that the version of Array.any_iff used in your proof indeed yields the expected equivalence. Sometimes the library might have changed or additional argument instances may be needed.  
 • If the “decide (x = y)” conversion is causing type trouble (the lemma might be stated using a different “decidable” instance), an alternate approach would be to work by unfolding and then using rewrite or simp to massage the statement into the desired form.

─────────────────────────────  
Conclusion and root cause

The root cause is twofold:
 1. The use (and layout) of the bullet markers (“·”) is not correctly indented, so Lean’s parser fails to recognize the beginning of a new subproof. This causes an “unexpected token” error and leaves the two directions of the equivalence unsolved.
 2. There is a potential mismatch between the Boolean equality (a.any … = true) and the corresponding existential propositions, especially in light of how Array.any_iff is applied and how decide is used inside. (Even if the intended meaning is correct, the actual types must match exactly.)

To fix the proof, try the following directions:
 – Reformat the proof so that each branch is clearly delimited. For example:

--------------------------------------------------------
theorem hasCommonElement_spec_satisfied (a : Array Int) (b : Array Int) :
  hasCommonElement_spec a b (hasCommonElement a b) := by
  unfold hasCommonElement hasCommonElement_spec
  apply Iff.intro
  · -- "mp" direction: assume a.any … = true
    intro h
    obtain ⟨i, hi, hik⟩ := Array.any_iff.mp h
    obtain ⟨j, hj, hjk⟩ := Array.any_iff.mp hik
    exact ⟨i, j, hi, hj, hjk⟩
  · -- "mpr" direction: assume there exists common indices
    rintro ⟨i, j, hi, hj, heq⟩
    apply Array.any_iff.mpr
    use i
    constructor
    · exact hi
    · apply Array.any_iff.mpr
      use j
      exact ⟨hj, heq⟩
--------------------------------------------------------

 – Alternatively, use curly braces { … } for the two directions so that the block structure is unambiguous.
 – Ensure that the lemmas you use (like Array.any_iff) exactly match the types in your goals, especially with respect to Bool versus Prop and the use of decide.

Once the bullets are correctly arranged and the lemma applications match the intended unfolded form of your definitions, the proof should typecheck.

This should give you a good starting point to correct the error.