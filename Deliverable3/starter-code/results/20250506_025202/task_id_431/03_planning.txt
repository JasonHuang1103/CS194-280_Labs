Below is our detailed reasoning and plan. We first explain our thought process step‐by‐step and then present our plan for implementing the function and proving its specification.

──────────────────────────────
Step 1. Understanding the function’s purpose

• We are given two arrays of integers, a and b. The function should return true if there is at least one integer that appears in both arrays. Otherwise (if there is no common element or if one of the arrays is empty) it should return false.
• Because of the “empty array” clause, note that if either array is empty then there is no index available in that array and the “exists” condition does not hold. (Recall that the method “Array.any” returns false on an empty array.)

──────────────────────────────
Step 2. Decompose the problem into parts

1. Implementation:
   • We want to check whether there exists an element x in a and an element y in b such that x = y.
   • Lean’s array API provides a method called “any” which tests if there is an element satisfying a predicate.
   • Thus one natural approach is to write:
     
         a.any (λ x => b.any (λ y => x = y))
     
     This says “for some x in a, check whether there is some y in b with x = y.”
   • We do not need to add explicit handling for empty arrays because if a is empty then a.any returns false; if b is empty then for every x ∈ a the inner b.any is false.

2. The specification:
   • We are given a predicate hasCommonElement_spec such that
     
         ⟨∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!⟩ ↔ result
     
     For the function we “plug in” our implementation into result.
   • The goal now is to show that our implementation indeed meets this if-and-only-if condition.

──────────────────────────────
Step 3. Considering input types, edge cases, and expected behavior

• Input types: Both arrays are of type Array Int.
• Edge cases:
  - When either a or b is empty then a.any returns false, which matches the specification because no index can be found to witness a common element.
  - When nonempty, our nested “any” calls are equivalent to “∃ i, i < a.size ∧ (∃ j, j < b.size ∧ a[i]! = b[j]!)”.

──────────────────────────────
Step 4. Proof techniques

For the proof, we must prove an equivalence (↔). In Lean such proofs are typically done with:
  • “constructor” or “apply iff.intro” to split the goal into two directions.
  • In each direction use the properties of “Array.any”. In many cases there is an equivalence lemma such as “Array.any_iff” (or a custom version there‐of) which tells us:
    
         a.any p  ↔ ∃ i, i < a.size ∧ p(a[i]!)
    
    and similarly for the inner “b.any”.
  • By applying these equivalences, we can reduce the proof goal to the obvious equivalence of:
    
         (∃ i, i < a.size ∧ (∃ j, j < b.size ∧ a[i]! = b[j]!))
    
    with the given spec.
  • We then structure the two implications:
    - (→) Assume there exists i, j such that a[i]! = b[j]!. Then, by choosing x = a[i] (and noting the corresponding witness j for b), it follows the predicate inside a.any is true, and hence a.any returns true.
    - (←) Conversely, assume a.any returns true. Then there is an index i with a[i]! such that b.any returns true. Unfolding b.any there exists j with b[j]! such that a[i]! = b[j]!. Hence, ∃ i j such that a[i]! = b[j]!.

──────────────────────────────
Step 5. Similar patterns and examples

• In the provided documentation examples the proof is structured by introducing assumptions, splitting the ↔ proof into two implications, and then using “intro”, “cases” (or “rcases”) to extract witnesses.
• We also see the use of “constructor” (or equivalently “apply iff.intro”) to handle the two directions.
• This technique is directly analogous to what we need: apply the appropriate “any_iff” lemmas (or reason about the definition of “any”) and then introduce and eliminate the ∃ quantifier in each direction.

──────────────────────────────
Detailed Plan Summary

Implementation Plan:
1. Define the function by using the “any” functions on array a and b.
2. Use a nested call where for each element of a, check whether b contains an equal element.
3. The one-liner:
     
         def hasCommonElement (a : Array Int) (b : Array Int) : Bool :=
           a.any (λ x => b.any (λ y => x = y))
     
   meets the specification directly.

Proof Plan:
1. Unfold the definitions of hasCommonElement and hasCommonElement_spec.
2. Show that a.any (λ x => b.any (λ y => x = y)) is equivalent to:
     
         ∃ i, i < a.size ∧ (∃ j, j < b.size ∧ a[i]! = b[j]!)
     
3. Prove both directions:
   • (→) From ∃ i, j, deduce that the inner predicate holds for the appropriate x and therefore a.any returns true.
   • (←) From a.any returning true, extract an index i for which the inner predicate holds, then extract a corresponding index j. Conclude ∃ i, j.
4. Tactically, use “constructor” (or “apply iff.intro”), “intro”, and “rcases” to deconstruct the existentials.
5. (Optionally) Use existing lemmas about “Array.any” if available to avoid low-level details.

──────────────────────────────
Final Outline

Below is an outline of what the Lean code will look like:

--------------------------------------------------
import Mathlib
import Aesop

-- Implementation
def hasCommonElement (a : Array Int) (b : Array Int) : Bool :=
  -- Use the built-in “any” function on arrays.
  a.any (fun x => b.any (fun y => x = y))

-- Theorem: The function satisfies the specification:
-- (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ result
def hasCommonElement_spec (a : Array Int) (b : Array Int) (result : Bool) : Prop :=
  (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ result

theorem hasCommonElement_spec_satisfied (a : Array Int) (b : Array Int) :
  hasCommonElement_spec a b (hasCommonElement a b) :=
by
  -- Unfold definitions:
  unfold hasCommonElement hasCommonElement_spec
  -- At this point we need to show:
  -- a.any (fun x => b.any (fun y => x = y)) ↔ ∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!
  apply Iff.intro
  · -- Forward direction:
    intro h
    -- Use a standard lemma (or replicate the reasoning) to obtain an index i in a.
    -- For example, if Array.any_iff exists:
    -- have ⟨i, hi, hx⟩ := Array.any_iff.mp h
    -- then apply Array.any_iff again to get j.
    -- (The complete details depend on the available API.)
    sorry  -- fill in with the detailed extraction of indices.
  · -- Reverse direction:
    intro ⟨i, j, hi, hj, heq⟩
    -- Show that selecting x = a[i]! makes b.any return true by witnessing index j.
    -- Hence a.any returns true.
    sorry  -- fill in with the detailed construction.
--------------------------------------------------

──────────────────────────────
Conclusion

We have broken down the problem as follows:
1. The function is implemented as a nested “any” call over the arrays.
2. In the proof we show the equivalence by unpacking the definitions of “any” and relating the existence of indices to the boolean result.
3. We use standard tactics (constructor, intro, rcases) that appear in Lean’s documentation examples.

This is our complete plan for both the implementation of the function and the corresponding proof. (Note: The “sorry” markers in the proof indicate where the precise extraction proofs for the “any” function’s properties would be developed.)