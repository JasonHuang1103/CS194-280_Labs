Below is a step‐by‐step analysis of what is going on and why Lean is complaining:

──────────────────────────────
1. IDENTIFY WHICH TACTIC IS FAILING AND WHY

In the proof you write

  simp [List.all?, Array.toList, List.foldr_eq_foldl', foldl_and]

and Lean immediately complains with errors like

  unknown constant 'List.all?'
  unknown constant 'List.foldr_eq_foldl''
  unknown identifier 'foldl_and'

This tells us that the simp call is trying to use names (lemmas or definitions) that Lean cannot find. In other words, the tactic “simp” is failing because it is told to simplify using lemmas whose names either do not exist or are not visible in the current context. (They may be from a different version of mathlib or simply not defined in Lean 4.)

──────────────────────────────
2. CONSIDER THE PROOF STATE AT THAT POINT

After you do

  unfold isGreater isGreater_spec

the goal becomes something like

  (∀ i, i < a.size → n > a[i]!) ↔ (a.toList.foldr (fun x acc => (n > x) && acc) true)

Before applying simp, you must rewrite parts of that expression into forms that let you easily relate the fold on the list with the “for-all” property. You intended to use lemmas that relate a folding function (that is, boolean “and” over a list) with a universal quantifier (the predicate “n > x” holds for every element). However, the lemmas that would allow you to go back and forth (here called “List.all?”, “List.foldr_eq_foldl'”, and “foldl_and”) are not known to Lean.

──────────────────────────────
3. CHECK IF THE PROOF APPROACH MATCHES THE SPECIFICATION

The overall strategy is sound: you want to prove the bidirectional equivalence between “forall i, i < a.size → n > a[i]!” and a folded boolean that checks that n > every element of the list. However, the implementation relies on “off-the-shelf” simp rules or lemmas that are either not available or not correctly imported. In other words, even though the idea is acceptable, the way you are “bridging the gap” (via these undefined lemmas) is not matching what is available in Lean 4’s library.

──────────────────────────────
4. IDENTIFY ANY TYPE MISMATCHES OR INCORRECT ASSUMPTIONS

There is no explicit type mismatch between the types involved: the fold over the list produces a Bool, and you want to relate that to a universal proposition over the indices. The error is not a matter of mismatched types but rather of referencing names that either do not exist or are not brought into scope. Your use of “List.all?” suggests you expect a function that “tests” that all list elements satisfy a property, and similarly with “foldr_eq_foldl'” and “foldl_and” for relating different fold processes. Lean is simply not aware of these constants.

──────────────────────────────
5. CONSIDER ALTERNATIVE PROOF STRATEGIES

There are a couple of ways you could address this:

• If you intended to use lemmas from mathlib that do exactly what you need, you should check the current name and location of these lemmas in the Lean community libraries for Lean 4. It is very likely that either their names have changed or the module that defines them is not imported in your file.

• You could take an alternative approach by avoiding these unknown names. For example, you might rewrite the goal manually or prove the equivalence by induction on the list (as you already partially do) rather than trying to “simplify” via rewriting with lemmas you assumed were available.

• Define your own helper lemmas to relate the folded boolean with the “∀” condition. That way, you won’t depend on uncertain names and can control exactly how and when the equivalence is shown.

──────────────────────────────
CONCLUSION: ROOT CAUSE AND SUGGESTION

The root cause is that the proof is built on using lemmas called “List.all?”, “List.foldr_eq_foldl'”, and “foldl_and” that Lean 4 does not recognize. They may be remnants from an earlier version of Lean or mathlib, or you may not have imported the correct modules.

To fix the issue, you should either:

1. Locate the current library definitions (or equivalent lemmas) that capture these facts. This might involve changing the names or adding additional import commands (for instance, importing a module like Mathlib.Data.List or a related file that defines these lemmas).

2. Alternatively, rework the proof so that instead of relying on these lemmas in simp, you prove the equivalence either by a direct induction on a.toList or by manually rewriting the definition of the fold over the list in terms of a property that “all elements satisfy the predicate” (i.e., build your own helper lemmas).

By following one of these directions, you will avoid referencing undefined constants and, consequently, the errors will go away.

──────────────────────────────
Hopefully, this analysis helps you understand where the error lies in your proof and how you might begin to resolve it.