min y x : = by intro x y apply le _ min apply min _ le _ right apply min _ le _ left apply le _ antisymm apply h apply h we will say more about the universal quantifier in section 3. 1, but suffice it to say here that the hypothesis h says that the desired inequality holds for any x and y, and the intro tactic introduces an arbitrary x and y to establish the conclusion. the first apply after le _ antisymm implicitly uses h a b, whereas the second one uses h b a. another solution is to use the repeat tactic, which applies a tactic ( or a block ) as many times as it can. example : min a b = min b a : = by apply le _ antisymm repeat apply le _ min apply min _ le _ right apply min _ le _ left we encourage you to prove the following as exercises. you can use either of the tricks just described to shorten the first. example : max a b = max b a : = by sorry example : min ( min a b ) c = min a ( min b c ) : = by sorry of course, you are welcome to prove the associativity of max as well. it is
min y x : = by intro x y apply le _ min apply min _ le _ right apply min _ le _ left apply le _ antisymm apply h apply h we will say more about the universal quantifier in section 3. 1, but suffice it to say here that the hypothesis h says that the desired inequality holds for any x and y, and the intro tactic introduces an arbitrary x and y to establish the conclusion. the first apply after le _ antisymm implicitly uses h a b, whereas the second one uses h b a. another solution is to use the repeat tactic, which applies a tactic ( or a block ) as many times as it can. example : min a b = min b a : = by apply le _ antisymm repeat apply le _ min apply min _ le _ right apply min _ le _ left we encourage you to prove the following as exercises. you can use either of the tricks just described to shorten the first. example : max a b = max b a : = by sorry example : min ( min a b ) c = min a ( min b c ) : = by sorry of course, you are welcome to prove the associativity of max as well. it is
min : c ≤ a → c ≤ b → c ≤ min a b ) can you guess the names of the theorems that characterize max in a similar way? notice that we have to apply min to a pair of arguments a and b by writing min a b rather than min ( a, b ). formally, min is a function of type ℝ → ℝ → ℝ. when we write a type like this with multiple arrows, the convention is that the implicit parentheses associate to the right, so the type is interpreted as ℝ → ( ℝ → ℝ ). the net effect is that if a and b have type ℝ then min a has type ℝ → ℝ and min a b has type ℝ, so min acts like a function of two arguments, as we expect. handling multiple arguments in this way is known as currying, after the logician haskell curry. the order of operations in lean can also take some getting used to. function application binds tighter than infix operations, so the expression min a b + c is interpreted as ( min a b ) + c. with time, these conventions will become second nature. using the theorem le _ antisymm, we can show that two real numbers are equal if each is less than or equal to the