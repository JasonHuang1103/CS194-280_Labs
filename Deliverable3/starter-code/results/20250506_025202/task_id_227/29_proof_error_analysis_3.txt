Below is a step‐by‐step analysis of what is going wrong with the proof and what you might do to fix it.

──────────────────────────────
1. Failing tactic and why

The proof “fails” when Lean reports unsolved goals and a syntax error on a bullet (the “·” token). In our proof the tactics that “fail” are:
 • The use of simp with [h₁, h₂] (and later [h₁, h₃]) on an “if … then … else …” expression. Although you expect simp to “reduce” the if–expression by using h₁ (or h₂), it does not automatically “split” the conditional. (In Lean 4 one typically uses split_ifs rather than simp in such cases.)  
 • Moreover, Lean complains at a “·” token (bullet marker) where it expected a new tactic command. In Lean 4 the use of bullet markers is sensitive to indentation and formatting. In our case the bullet markers and indentation do not match the structure that Lean expects.

──────────────────────────────
2. The proof state at the failing point

After unfolding minOfThree and minOfThree_spec the goal becomes an “if … then … else …” expression in both the left (inequalities) and right (disjunction about equality with one of a, b, or c) parts. For each by_cases branch (first on a ≤ b, then on a ≤ c or b ≤ c) the goal still contains these unresolved if–expressions. In other words, the current context does not “know” that, for example, when h₁ : a ≤ b holds then the if in minOfThree actually returns the branch
  if a ≤ c then a else c
but simp [h₁, h₂] does not reduce that expression correctly. (The proof state in each branch therefore remains “unfinished”, which is why Lean complains about unsolved goals.)

──────────────────────────────
3. Does the strategy match the specification?

Your overall strategy is to show that the computed value is less than or equal to each input and that it is equal to one of them. The approach is sensible, but the proof gets “stuck” because the if–expression is not reduced to the expected value. Typically one would “split” the if using a tactic (like split_ifs) or by doing a case analysis on its conditions so that the proof for each branch becomes routine.

──────────────────────────────
4. Type mismatches and incorrect assumptions

A few spots are problematic:
 • In several branches you use lemmas such as Int.le_of_not_ge, Int.lt_of_not_ge, and .trans_lt. For example, in one branch you write
  exact ⟨Int.le_of_not_ge h₂, h₁.trans (Int.le_of_not_ge h₂), Int.le_refl c⟩
but note that if h₂ is a hypothesis of the form “¬ (a ≤ c)” then using a “le_of_not_ge” or “lt_of_not_ge” may not have the right type or the proper meaning (it seems you expect a “non-inequality” to imply an inequality in the other direction). In addition, mixing a proof of ≤ with a proof using transitivity that produces an < can lead to a type mismatch (Lean will not accept that a proof of a strict '<' can serve in a place where a non-strict '≤' is required).

 • The use of bullet markers “·” in combination with tactic chaining (and the indentation) is causing a syntax error. Lean 4 expects a new tactic command after a bullet and does not accept an unexpected “·” where a command is expected.

──────────────────────────────
5. Alternative proof strategies

A clearer proof would do one or both of the following:
 (a) Use the split_ifs tactic. This tactic will “unfold” the nested if–expressions into separate cases in which the boolean conditions are replaced by proofs. For example, immediately after unfolding you could write:
  split_ifs with h₁ h₂ h₃
which gives you cases corresponding to when a ≤ b (or its negation) and then further splits the inner if.
 (b) Avoid using simp to “apply” h₁ or h₂. Instead, use case analysis or even a calc-style proof to reduce the conditional to one of {a, b, c}.

Also, verify that you are applying the correct lemmas (e.g., using the “if_pos” and “if_neg” lemmas) and that the proofs about ≤ and < are of the proper type. For instance, if you need to derive that a > c when h₂ fails, it might be better to show that c ≤ a (using a lemma that “converts” ¬ (a ≤ c) into c < a or at least gives you the needed inequality in the context of integers).

──────────────────────────────
Conclusion: Root Cause Analysis and Fix Direction

The root causes of the error are twofold:
 1. The if–expression is not “split” the way you expect. Using simp with the side hypotheses (h₁, h₂, h₃) does not automatically reduce the nested if–expression. Lean is then left with an unsolved goal containing the conditional.
 2. The bullet markers and tactic formatting (indentation and “·”) are not aligned with Lean 4’s expected syntax, so Lean encounters an unexpected token.

To fix the proof you should:
 • Replace the use of simp [h₁, h₂] (etc.) with split_ifs (or a case analysis that uses the if_pos/if_neg lemmas) so that the if–expression is eliminated and you work directly with one of a, b, or c.
 • Double-check that each branch of your case analysis produces a proof that the returned value satisfies “result ≤ a ∧ result ≤ b ∧ result ≤ c” and “result = a ∨ result = b ∨ result = c”. In particular, be careful with the inequalities – do not mix up ≤ and < unless you have the proper lemmas with the correct types.
 • Review the formatting and indentation of the bullet markers. Ensure that all “·” bullets (or other bullet styles) align with Lean 4’s expected syntax so that no “unexpected token” errors occur.

Following these directions should lead to a proof that both correctly “evaluates” the if–expression and neatly shows that minOfThree returns the minimum value.

Happy proving!