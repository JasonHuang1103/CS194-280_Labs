Below is a step‐by‐step analysis of what’s happening and where the error comes from.

─────────────────────────────  
1. Which tactic is failing and why

The error occurs at the line

  apply Nat.mod_lt n 10 (by decide)

The tactic Nat.mod_lt is meant to prove the inequality n % 10 < 10 (provided that 10 > 0). However, after the earlier tactics (unfold and simp), the goal is a conjunction having two parts. The apply tactic is being used on the entire conjunction instead of on the single inequality n % 10 < 10. In short, the “apply” is not targeting the exact subgoal that needs Nat.mod_lt.

─────────────────────────────  
2. Consider the proof state at that point

After you write

  unfold lastDigit lastDigit_spec  
  simp

your goal becomes something equivalent to

  (0 ≤ n % 10 ∧ n % 10 < 10) ∧ (n % 10 = n % 10)

Lean simplifies parts of that:
– The fact (0 ≤ n % 10) is automatically true since n % 10 is a natural number.
– The equality (n % 10 = n % 10) is trivial (by reflexivity).
Thus, the only non‐trivial part is (n % 10 < 10).

However, because the overall goal is a conjunction involving this inequality, Lean’s tactic state still has the whole conjunction as its goal. Your “apply Nat.mod_lt n 10 (by decide)” tactic is trying to cover a goal of the form “A ∧ B” with a proof of just A, hence leaving “B” unsolved. That is why the error message complains that there is an unsolved goal n : ℕ ⊢ n % 10 < 10.

─────────────────────────────  
3. Check if the proof approach matches the specification

The specification lastDigit_spec states that for a given natural number n, lastDigit_spec n (lastDigit n) is the proposition:
  (0 ≤ result ∧ result < 10) ∧ (n % 10 = result)
with result being n % 10 in our implementation. After unfolding and simplification, the only non-trivial thing to prove is that n % 10 < 10 (since the other parts are immediate). So, in principle, the intended proof is correct – it just needs to properly address the structure of the goal (the conjunction).

─────────────────────────────  
4. Identify any type mismatches or incorrect assumptions

There is no type mismatch. The assumption that 10 > 0 is correct (with “by decide” handling the proof) and Nat.mod_lt is the proper lemma to prove that n % 10 < 10. The mistake is not making explicit that the goal is a conjunction and then applying the lemma to the correct component of that conjunction.

─────────────────────────────  
5. Consider alternative proof strategies

One common strategy is to break up the conjunction into separate subgoals. For example, you could use:

  constructor

or

  split

to split the conjunction into two goals:
  • first goal: prove n % 10 < 10 (where you can use Nat.mod_lt),  
  • second goal: prove n % 10 = n % 10 (which is just rfl).

Alternatively, you could use a tactic like "apply And.intro" to provide proofs for each conjunct separately.

─────────────────────────────  
Detailed Analysis and Root Cause

The root issue is that after simplifying the goal, it remains a conjunction. The “apply Nat.mod_lt n 10 (by decide)” tactic is only meant to prove the inequality part of the conjunction (n % 10 < 10). Because no tactic was used to focus on that particular conjunct, Lean complains that there is an unsolved goal. Additionally, after this step the syntax of the proof script possibly leads to an “unexpected identifier” error because the command line is not properly terminated after leaving a goal unsolved.

─────────────────────────────  
A Suggested Fix

One way to fix the proof is to explicitly split the conjunction into two parts. For example:

 
 theorem lastDigit_spec_satisfied (n : Nat) :
  lastDigit_spec n (lastDigit n) := by
  split
  • apply Nat.mod_lt n 10; decide
  • rfl

In this revised proof:
 – The "split" tactic separates the combination into two subgoals.
 – The first subgoal (n % 10 < 10) is solved by applying Nat.mod_lt.
 – The second subgoal (n % 10 = n % 10) is solved by rfl.

─────────────────────────────  
Conclusion

The error is rooted in the fact that the conjunction in your goal was not split before applying Nat.mod_lt. The apply tactic was attempting to match a proof for a single inequality against a combined goal, leaving unsolved parts. By splitting the goal or by otherwise directing the proof to work on each conjunct individually, you will resolve the unsolved goals and eliminate the error.