Below is our full reasoning and plan for solving the problem.

──────────────────────────────
Step 1. Understand the Requirements

• Our Lean function is given two arrays, a and b, containing integers.  
• It must check whether there exists at least one element that appears in both arrays.  
• According to the specification, if either array is empty then there is no common element and the function must return false.

──────────────────────────────
Step 2. Breaking Down the Problem

We can break the problem into two subtasks:
1. Write a function that “scans” array a and—for every element—checks whether that element is in array b.
2. Return true as soon as a common element is found; otherwise return false.  
This behavior is naturally captured by the function “any” on arrays.

──────────────────────────────
Step 3. Input Types, Edge Cases, and Expected Behavior

• Input types: Both a and b are of type Array Int.  
• Edge Cases:  
 – If array a or b is empty the “any” function on a (or no elements) leads to false.  
 – (This behavior meets the specification because no index i or j can be chosen if an array is empty.)
• Expected Behavior:
 – When a has an element x for which b.contains x is true, then our function should yield true.
 – Otherwise, it should yield false.

──────────────────────────────
Step 4. Proof Strategy Considerations

To prove that our function meets its specification we must show that:
 (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ (hasCommonElement a b)

Proof method:
1. Unfold the definitions of hasCommonElement and hasCommonElement_spec.
2. Use the equivalences:  
 – a.any p = true ↔ ∃ i < a.size, p (a[i]!).  
 – For the specific predicate p x defined as b.contains x, note b.contains x = true ↔ ∃ j < b.size, x = b[j]!  
3. Chain these equivalences to establish the bidirectional implication.

──────────────────────────────
Step 5. Noting Similar Patterns

Similar patterns in Lean’s array library include the usage of “Array.any” and “Array.contains”. We know that:
 a.any (λ x, b.contains x) = true  
is equivalent to saying at least one element x in a satisfies b.contains x, which unfolds to the existence of indices i and j satisfying the equality.  
These properties guide both the implementation and the correctness proof.

──────────────────────────────
Detailed Plan for Implementation and Proof

A. Implementation Plan

1. Define hasCommonElement by using the Array.any method with the lambda predicate (λ x, b.contains x).  
 That is, we write:
  def hasCommonElement (a : Array Int) (b : Array Int) : Bool :=
   a.any (λ x, b.contains x)
This implementation naturally returns false if a is empty (and we do not even need to check b explicitly, because b.contains x on any x of an empty array trivially never happens).

B. Proof Plan

1. Begin the proof by unfolding the definitions of hasCommonElement and hasCommonElement_spec.
2. Use the equivalence:
  a.any f = true ↔ ∃ i, i < a.size ∧ f(a[i]!) = true  
3. Substitute f with (λ x, b.contains x), and then use the equivalence:
  b.contains x = true ↔ ∃ j, j < b.size ∧ x = b[j]!
4. Conclude that:
  a.any (λ x, b.contains x) = true ↔ (∃ i, i < a.size ∧ ∃ j, j < b.size ∧ a[i]! = b[j]!)
5. Use the bidirectional implication (↔) to match the specification.

──────────────────────────────
Final Code with Implementation and Proof Skeleton

Below is our final Lean 4 code following the plan:

------------------------------------------------------------
import Mathlib
import Aesop

-- Implementation
def hasCommonElement (a : Array Int) (b : Array Int) : Bool :=
  -- << CODE START >>
  a.any (λ x, b.contains x)
  -- << CODE END >>

-- Specification: There exists a common element if and only if the result is true.
def hasCommonElement_spec (a : Array Int) (b : Array Int) (result : Bool) : Prop :=
  -- << SPEC START >>
  (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ result
  -- << SPEC END >>

theorem hasCommonElement_spec_satisfied (a : Array Int) (b : Array Int) :
  hasCommonElement_spec a b (hasCommonElement a b) := by
  -- << PROOF START >>
  -- Unfold the definitions:
  unfold hasCommonElement_spec hasCommonElement,
  -- Rewrite “any” using its existential unfolding. That is, we use the fact that:
  -- a.any (λ x, b.contains x) = true ↔ ∃ i, i < a.size ∧ b.contains (a[i]!) = true.
  sorry
  -- << PROOF END >>

------------------------------------------------------------

In the above proof skeleton, our next step would be to rigorously apply:
 • A lemma like “Array.any_iff” to relate a.any (λ x, P) to ∃ i < a.size with property P (a[i]!), and  
 • A similar lemma for “Array.contains_iff” to conclude b.contains x = true ↔ ∃ j < b.size, x = b[j]!
Then we would complete the chain of equivalences to finish the proof.

──────────────────────────────
Conclusion

We have:
1. Understood the task: check for common elements between arrays.
2. Broken the task into a simple scan using the “any” method with array membership checking.
3. Noted that our function’s type signature and behavior cover the edge cases (like empty arrays).
4. Planned to prove the specification by unfolding the definitions and using known equivalences about array iteration and membership.
5. Concluded with a detailed plan for implementing the function and setting up the proof.

This plan provides both the implementation approach and the essential steps for the correctness proof in Lean 4.