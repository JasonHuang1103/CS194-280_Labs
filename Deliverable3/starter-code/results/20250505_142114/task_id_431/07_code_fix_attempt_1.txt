Step 1: Identify the code causing the error  
• The error is raised at the lambda expression in the function hasCommonElement, specifically at  
  a.any (λ x, b.contains x)

Step 2: Explain why this is causing an issue  
• In Lean 4, lambda expressions must use the "=>" notation rather than a comma (",") to separate the parameter(s) from the function body.  
• Therefore, using a comma after "λ x" leads Lean 4 to expect an arrow ("=>") but finds a comma instead, triggering the error.

Step 3: Consider the type system and Lean 4 requirements  
• Lean 4 enforces stricter syntax rules for lambda expressions.  
• The lambda should be written as "λ x => b.contains x" so that the function is correctly constructed with the expected type.

Step 4: Think through potential solutions  
• The solution is to replace the comma (",") with "=>" in the lambda expression.  
• Thus, correct the expression to: a.any (λ x => b.contains x)

Step 5: Test each solution in your head  
• Replacing the comma with "=>" yields valid Lean 4 syntax.  
• The new code should compile correctly without causing the unexpected token error.

Below is the fixed version of the function implementation:

-------------------------------------------------
def hasCommonElement (a : Array Int) (b : Array Int) : Bool :=
  a.any (λ x => b.contains x)
-------------------------------------------------

This change satisfies Lean 4's lambda expression syntax requirements and should resolve the error.