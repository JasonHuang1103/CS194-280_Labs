Below is a detailed step‐by‐step explanation of what’s going wrong and why Lean stops with unsolved goals:

─────────────────────────────  
1. Tactic Failing and Why  
─────────────────────────────  
The proof is written by “unfolding” the definition of minOfThree and then using tactics like split and split_ifs. In the unfolded goal, you end up with an if‐expression (for example, “if a ≤ c then a else c”) that must satisfy two properties—being ≤ a, ≤ b, ≤ c and equal to one of a, b, or c. When you use the tactic  
  split_ifs <;> simp only …  
Lean automatically generates one branch for each “if” condition (and its negation). However, in at least one branch the hypothesis from the if is not enough to prove the inequality obligations. For instance, in the branch where you have already assumed a ≤ b but also have ¬ (a ≤ c), the body of the if becomes c. In that branch your goal is to prove c ≤ a (together with the other inequalities).  
The tactic “simp only [⋯]” in that branch does not automatically use the fact that Int’s order is total (i.e. that given a and c, either a ≤ c or c ≤ a) so that from ¬ (a ≤ c) one may conclude c ≤ a. Thus the “split_ifs” leaves an unsolved subgoal.  

─────────────────────────────  
2. The Proof State at the Failing Point  
─────────────────────────────  
Consider the branch when a ≤ b holds and ¬ (a ≤ c) holds. After unfolding and the if‐splitting, the resulting goal is something like:  

  ⊢ ((if a ≤ c then a else c) ≤ a ∧ …) ∧ ( … )  
  
Since ¬ (a ≤ c) holds here, the if–expression reduces to c. Therefore the goal becomes  
  ⊢ (c ≤ a ∧ …) ∧ (…).  
While the “… ” parts (the other inequalities and disjunction) may be solved easily, the subgoal c ≤ a is not automatically discharged. Even though in a total order (like that on Int) from ¬ (a ≤ c) one can conclude c ≤ a (by totality of ≤), Lean’s simp set does not automatically use that reasoning unless you provide a lemma or extra steps.  

─────────────────────────────  
3. Does the Proof Approach Match the Specification?  
─────────────────────────────  
The overall strategy is correct—the definition is unfolded, and the if–conditions are split so that you reason on each branch. However, the specification requires showing that the returned result is the minimum (i.e. less than or equal to each of a, b, c) and equal to one of them. In the “bad branch” (when a ≤ b and ¬ (a ≤ c)), the intended fact is that c must be smaller than a, yet the proof does not supply the argument that ¬ (a ≤ c) implies c ≤ a given the total order on Int. In other words, your approach misses providing the necessary ordering argument in that branch.  

─────────────────────────────  
4. Type Mismatches or Incorrect Assumptions  
─────────────────────────────  
There is no actual type mismatch. The definitions of minOfThree and the specification minOfThree_spec are both well‐typed. The error comes solely from missing proof arguments:  
• The unsolved “c ≤ a” (or similarly structured) subgoals in the if–branches.  
• The simp set in use (with lemmas like le_refl, ite_eq_right_iff, etc.) does not include the fact that Int is totally ordered. It does not “automatically” conclude that if ¬ (a ≤ c) then c ≤ a.  

─────────────────────────────  
5. Alternative Proof Strategies  
─────────────────────────────  
Here are some ways you could fix or improve the proof:  

• Instead of relying solely on split_ifs and simp, manually do a case analysis. For example, use “by cases h₁ : a ≤ c” and then in the branch where h₁ is false, explicitly use the totality lemma (for Int, you have le_total or a similar fact) to conclude that c ≤ a. One can write, for example:  

  have h₂ : c ≤ a := (le_total a c).resolve_left h₁,  

or invoke a lemma such as “if_not_le_then_lt” (and then use lt_imp_le).  

• Augment your simp with a rewrite rule or lemma that handles “¬ (a ≤ c)” by using totality of the order on Int.  

• Consider proving the statement with “by cases” on the conditions a ≤ b and a ≤ c rather than using “split_ifs”, to have more control over the hypotheses in each branch.  

─────────────────────────────  
Conclusion and Root Cause Analysis  
─────────────────────────────  
The root cause of the error is that in one or more branches (for example, when a ≤ b holds but a ≤ c fails), Lean must prove an inequality like c ≤ a, and your current tactic chain (split_ifs followed by simp only with a narrow set of lemmas) does not “see” that fact from the totality of the order on Int. In other words, the approach is missing an application of the totality property (or a lemma that “flips” the order when the if–condition is false).

To fix the error you need to add an explicit step in the branch where ¬ (a ≤ c) holds. For example, after splitting, in that branch you can introduce a statement like  
  have h₂ : c ≤ a := (le_total a c).resolve_left ‹¬ a ≤ c›,  
and then use h₂ to prove the needed inequality.

This way, by explicitly using the total order of Int, you can complete the proof in that branch and thereby discharge the unsolved goals.