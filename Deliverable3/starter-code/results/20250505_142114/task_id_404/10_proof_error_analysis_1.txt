Below is a step‐by‐step analysis of what is wrong with the proof—and in the end, a diagnosis of the root cause with some suggestions for fixing it.

─────────────────────────────  
1. Tactic Failure  
─────────────────────────────  
The error message says “unsolved goals” for both the isTrue and isFalse cases of a by_cases and then complains “unexpected token ‘·’”. In our proof we split the goal into two pieces, then in each piece we use “by_cases h : a ≤ b” with nested bullet proofs. In (at least) one branch the proof tactic does not close all the goals. In particular, in the branch for the “false” case (h : ¬ a ≤ b) the proof uses  
  simp [h, not_le] at h  
  exact le_of_lt h  
but h is only the hypothesis ¬ (a ≤ b)—it does not yet give a proof of a strict inequality. Lean’s library does have the fact that “if a ≤ b fails then b < a” in a total order on integers, but using that fact requires the proper lemma (and a careful matching of the roles of a and b). In short, the tactic “le_of_lt h” is applied on a hypothesis that is not of the expected type (a < b or b < a) and so the goal is left unsolved.  

─────────────────────────────  
2. Proof State at the Point of Failure  
─────────────────────────────  
After unfolding myMin and myMin_spec the proof goal for the “isTrue” case becomes  
  (a ≤ a ∧ a ≤ b) ∧ (a = a ∨ a = b)  
and for the “isFalse” case it becomes  
  (b ≤ a ∧ b ≤ b) ∧ (b = a ∨ b = b).  
In the branch where h : a ≤ b (the isTrue case), the intended plan is to note that myMin returns a so that a ≤ a holds by reflexivity and a ≤ b is given by h; also the disjunction is satisfied by a = a. In the other branch (isFalse), myMin returns b and thus one needs to show b ≤ a (because from ¬ (a ≤ b) one should deduce b < a, hence b ≤ a) and b ≤ b holds by reflexivity; the disjunction (b = a ∨ b = b) is satisfied by b = b. However, the tactics in the false branch do not properly “extract” the fact that ¬ (a ≤ b) implies b < a. In fact, the tactic “simp [h, not_le] at h” is suspicious—‘not_le’ is not a rewrite rule that will change h into a statement of type b < a, so the goal b ≤ a remains unsolved. Finally, after these by_cases blocks the use of bullet “·” is not aligned with any completed tactic block, which causes the “unexpected token ‘·’” error.  

─────────────────────────────  
3. Matching the Proof Approach to the Specification  
─────────────────────────────  
The specification requires the resulting value to be less than or equal to both a and b and to be either a or b. The definition for myMin is by definition an “if” statement, which is usually best handled in Lean by either pattern matching (or a direct computation) rather than by using separate by_cases tactics with nested bullets. (Using if-then-else may be clearer.) In the current proof the writers try to split the requirement into pieces and then do a by_cases on a ≤ b for each piece. Although the plan is conceptually sound, the tactic script does not "close" the cases as needed, in part because of the mis‐use of “simp” and “le_of_lt” in the false branch.  

─────────────────────────────  
4. Type Mismatches and Incorrect Assumptions  
─────────────────────────────  
A closer look at the false (isFalse) branch shows a couple of issues:  
 • The hypothesis h in the isFalse branch is of type ¬ (a ≤ b) (i.e. a > b), but then the proof uses “exact le_of_lt h”.  
 • The lemma le_of_lt expects a proof of a strict inequality (of type a < ? or ? < a) and not a negated inequality.  
 • Also, the “simp [h, not_le] at h” attempt is trying to rewrite h using a lemma called not_le—but unless you have such a lemma that changes ¬ (a ≤ b) into b < a, it will not do the job.  
 • Finally, the bullet “·” after finishing one split appears at a level where Lean does not expect a new tactic—this is an indentation (or bullet-structure) issue causing the “unexpected token” complaint.  

─────────────────────────────  
5. Alternative Proof Strategies  
─────────────────────────────  
Here are some promising ideas for a fix:  

 • Rather than manually splitting with “split” and then using multiple by_cases blocks, you could first do a case analysis on the “if a ≤ b then a else b” by rewriting myMin using “dsimp” or “rfl” and then using an “if … then … else …” pattern match.  
 • Use the fact that if a ≤ b then myMin a b = a and otherwise myMin a b = b. Then do two separate proofs: one when a ≤ b and one when ¬ (a ≤ b), and in each case use reflexivity and basic order lemmas.  
 • If you really want to stay close to your current approach, ensure that in the false case you obtain b < a (for example, by applying a lemma like lt_of_not_le which (in some libraries) states that for total orders, ¬ (a ≤ b) implies b < a) so that you may then conclude b ≤ a by applying le_of_lt.  
 • Also, check the bullet (“·”) indentation so that each bullet is at the correct level relative to its proof block.  

─────────────────────────────  
Conclusion and Root Cause  
─────────────────────────────  
The root problem is twofold:  
 1. In the isFalse branch of the by_cases, the tactic script misuses the hypothesis h (which is of type ¬ (a ≤ b)) by trying to “simplify” it into a strict inequality and then applying le_of_lt. Without an explicit proof that ¬(a ≤ b) implies b < a, that branch remains unsolved.  
 2. The bullet structure (the “·” markers) is misaligned with Lean’s expected tactic commands. This results in “unexpected token ‘·’” errors when Lean sees a bullet in an unexpected context.  

To fix the proof you might:  
 • Either refactor the proof to first perform a case split on the definition of myMin (using “if … then … else …” or pattern matching) so that each case is easy and closes by reflexivity (a = a, b = b, and a ≤ a, b ≤ b), or  
 • In your by_cases branches, explicitly apply the proper lemmas to obtain b < a from ¬ (a ≤ b) (for example, using a lemma from Mathlib that states “lt_of_not_le : ¬ (a ≤ b) → b < a” if available), and adjust the bullet indentation so that each subcase’s proof is correctly delimited.  

─────────────────────────────  
Final Suggestion  
─────────────────────────────  
A good direction is to “compute” the definition of myMin by doing a case split on “if a ≤ b then a else b” rather than doing two separate “by_cases” on each conjunct; then the proof becomes a case-wise reasoning that is easier to close. Also, double-check and correct the bullet indentations so that Lean does not interpret a bullet in an unexpected position.  

This detailed analysis should help you locate exactly where the proof gets stuck and how to rephrase or restructure it so that Lean accepts your proof.