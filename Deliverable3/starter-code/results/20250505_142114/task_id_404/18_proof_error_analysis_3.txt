Below is a step‐by‐step analysis of what is going wrong in the proof, along with the reasoning for each step and a suggestion for how to fix it.

────────────────────────
Step 1. Identify Which Tactic Is Failing and Why

The error message complains of “unsolved goals” and then later “unexpected token ‘·’”. In our proof, after doing

  unfold myMin myMin_spec  
  by_cases h : a ≤ b

we immediately try to apply split and further tactics. However, the main problem is that in each branch the term
  (if a ≤ b then a else b)
remains unsimplified. In the branch where h : a ≤ b holds the if‐expression is equal to a and in the branch where h is false, it equals b. Yet since we did nothing to “rewrite” the if–expression (for example, by using if_pos or if_neg), the goal still involves an if–expression that Lean does not automatically simplify. Hence, the split tactic (and the following bullet points) end up targeting a goal that still contains an if–expression rather than the intended a or b.

────────────────────────
Step 2. Consider the Proof State at That Point

After unfolding, the goal in each branch is:

  ((if a ≤ b then a else b) ≤ a ∧ (if a ≤ b then a else b) ≤ b) ∧
  ((if a ≤ b then a else b) = a ∨ (if a ≤ b then a else b) = b)

In the first branch, we have h : a ≤ b so the if–expression is definitionally a. However, because we never used a rewrite such as “rw [if_pos h]” the expression is still “if a ≤ b then a else b”. This makes it difficult for Lean to directly close the goal with the given tactics.

A similar issue holds in the second branch where h : ¬ a ≤ b. There we would want to replace the if–expression with b (using “rw [if_neg h]”), but no such step was taken.

────────────────────────
Step 3. Check if the Proof Approach Matches the Specification

The specification (myMin_spec) requires that the output of myMin is both less than or equal to a and b and is equal to either a or b. This is exactly what we want to prove about the if–expression. The intended case split by comparing a ≤ b is the right idea – but we must first “simplify” or “rewrite” that if–expression in each branch so that the proof matches the specification. Right now, our approach is conceptually fine but practically we are not “unfolding” or “rewriting” the definition of myMin to reveal the hidden a or b.

────────────────────────
Step 4. Identify Any Type Mismatches or Incorrect Assumptions

In the second branch the proof attempts:
  exact le_of_lt (lt_of_not_ge h)
to derive ((if a ≤ b then a else b) ≤ a). Here we are trying to show b ≤ a (since if the condition fails, myMin a b evaluates to b) by invoking a “lt_of_not_ge” on h : ¬ a ≤ b. While logically ¬ (a ≤ b) implies a > b (so b < a, hence b ≤ a), Lean does not automatically use that connection without the proper rewrite of the if–expression (i.e. replacing (if a ≤ b then a else b) with b via “rw [if_neg h]”). In short, our assumption is essentially correct in spirit (since a > b), but the type is not matching the goal because the goal still involves the if–expression rather than b.

Additionally, the “·” bullet tokens are showing an “unexpected token” error possibly because of misindentation or because Lean expected a command after the previous step (this error sometimes occurs when tactics are left incomplete because of unsolved subgoals).

────────────────────────
Step 5. Consider Alternative Proof Strategies

A straightforward fix is to simplify the conditional by rewriting it. For example, one could explicitly do:

  by_cases h : a ≤ b
  · rw [if_pos h]
    split; [split; ...]  -- now the goal is expressed in terms of a.
  · rw [if_neg h]
    split; [split; ...]  -- now the goal is expressed in terms of b.

Alternatively, one might let Lean’s simplifiers (e.g. “simp”) take care of the if–expression if the proper lemmas are provided. In any case, the key is to “unfold” the if–branch using if_pos and if_neg so that the underlying value (a or b) appears in the goal. This will allow Lean to match the goal with your supplied evidence.

────────────────────────
Conclusion & Root Cause

The root cause of the error is that although you are using a case analysis with by_cases, you never rewrite the if–expression in the definition of myMin. Therefore, your goals remain in the form “if a ≤ b then a else b” whereas your evidence is written in terms of a (or b) directly. This mismatch leaves unsolved goals and confuses the bullet structure in the proof.

────────────────────────
Suggested Direction for Fixing It

Modify the proof to rewrite the if–expression. For example:

-------------------------------------------------------------
theorem myMin_spec_satisfied (a : Int) (b : Int) :
  myMin_spec a b (myMin a b) := by
  unfold myMin myMin_spec
  by_cases h : a ≤ b
  · rw [if_pos h]
    split
    · exact ⟨le_refl a, h⟩
    · exact Or.inl rfl
  · rw [if_neg h]
    split
    · split
      · -- Here, since ¬ a ≤ b implies a > b, we have b ≤ a.
        exact le_of_lt (Int.lt_of_not_ge h)
      · exact le_refl b
    · exact Or.inr rfl
-------------------------------------------------------------

This way, each branch’s goal is stated in terms of either a or b directly, matching your provided evidence for the specification.

By following this approach, the proof will “see” that myMin a b indeed equals a or b as required, and the unsolved goals and bullet errors will be resolved.