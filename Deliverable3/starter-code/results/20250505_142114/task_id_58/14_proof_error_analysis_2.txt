Below is a step‐by‐step analysis of the error in your proof, along with the reasoning and suggestions for how to fix it.

──────────────────────────────────────
1. Which tactic is failing and why

The error points to an unsolved goal involving an equivalence between two disjunctions:
  a < 0 ∧ 0 < b ∨ 0 < a ∧ b < 0  ↔  0 < a ∧ b < 0 ∨ a < 0 ∧ 0 < b

You split the proof using the tactic

  constructor

which turns an "if and only if" (↔) into two separate implications. The first direction is proved by doing cases on the disjunction. In the second implication you write

  intros h
  rw [or_comm]
  exact h

It is this "rw [or_comm]" (rewriting using the commutativity of ∨) that is intended to transform one side into the other. However, Lean does not succeed in fully matching the structure of the goal after simplification. As a result the rewrite does not discharge the second subgoal, and it remains unsolved.

──────────────────────────────────────
2. Consider the proof state at that point

After “unfold” and “simp [Bool.and_eq_true, Bool.or_eq_true]”, the theorem’s goal becomes an equivalence between two propositions that differ only by the order of the disjuncts. When you enter the second branch of the constructor, the goal is essentially:

  ( a < 0 ∧ 0 < b ) ∨ ( 0 < a ∧ b < 0 )
        ↔
  ( 0 < a ∧ b < 0 ) ∨ ( a < 0 ∧ 0 < b )

Your hypothesis h gives you one of these orders but you need to match the goal exactly. Writing "rw [or_comm]" is supposed to swap the disjuncts, but because of the way Lean “sees” the proposition (after the simplification) the rewriting does not completely solve the goal.

──────────────────────────────────────
3. Does the proof approach match the specification?

Your spec is

  hasOppositeSign_spec a b result  ≡  ((a < 0 ∧ b > 0) ∨ (a > 0 ∧ b < 0)) ↔ result

and your definition of hasOppositeSign is given by a Boolean expression that unfolds (using simp) into

  (0 < a ∧ b < 0) ∨ (a < 0 ∧ 0 < b) 

So at its core, you need to prove that

  (a < 0 ∧ b > 0) ∨ (a > 0 ∧ b < 0)  ↔  (0 < a ∧ b < 0) ∨ (a < 0 ∧ 0 < b).

Note that “b > 0” is the same as “0 < b” and “a > 0” is the same as “0 < a” by the properties of <. The only difference is the order of the disjuncts. In other words, the two sides are logically equivalent because ∨ is commutative. Your approach is in principle fine—you only need to supply the missing fact that or_commutes.

──────────────────────────────────────
4. Identify any type mismatches or incorrect assumptions

There is no fundamental type mismatch here; the only “mismatch” is that your boolean function (hasOppositeSign) and its Prop specification (hasOppositeSign_spec) are unfolded to nearly identical formulas except for the order of the disjunction. The unsolved goal is exactly

  P ∨ Q  ↔  Q ∨ P

and while it is “obviously true by commutativity” the rewrite you attempted (rw [or_comm]) was not enough to solve it automatically. In Lean, or_comm is a lemma that states
  ∀ (P Q : Prop), P ∨ Q ↔ Q ∨ P.
It is available but in your proof the rewriting did not trigger a match that fully eliminates the goal.

──────────────────────────────────────
5. Consider alternative proof strategies

Here are a few alternatives you might try:
 • Instead of doing a manual case split and rewrite, simply apply the lemma or_comm directly. For example, in the second implication you might write:
  exact or_comm _ _

 • Alternatively, you could finish the whole proof by using tactics that automatically close propositional goals. For instance:
  by simp [Bool.and_eq_true, Bool.or_eq_true, or_comm]

 • Another approach is to prove the goal using propext (propositional extensionality) or a “tauto”-like tactic if one is available.

──────────────────────────────────────
Concluding Analysis and Direction for Fixing the Error

The root cause of the error is that after simplifying, your goal is to show
  P ∨ Q ↔ Q ∨ P,
but your attempt to rewrite with or_comm did not complete the proof of that implication. Because the goal is an equivalence and the two sides differ only by the order of disjuncts, Lean expects you to either apply or_comm directly or use a tactic that automatically handles such propositional symmetry.

To fix the error, you can change the second branch of your proof to discharge the goal with the appropriate lemma. For example:

  · intros h
    exact or_comm _ _

This change tells Lean directly that the equivalence follows by the commutativity of disjunction.

──────────────────────────────────────
Summary Answer

The error comes from the second branch of your proof where you attempt to use
  rw [or_comm]
to turn
  ( a < 0 ∧ 0 < b ) ∨ ( 0 < a ∧ b < 0 )
into its commuted form. However, this rewriting does not completely discharge the goal, leaving an unsolved equivalence that causes Lean’s error message. The fix is to explicitly apply the or_comm lemma (or a similar tactic) to show that the two sides of the equivalence are equal. For example, replace the failing block with:

  · intros h
    exact or_comm _ _

This should complete your proof without errors.