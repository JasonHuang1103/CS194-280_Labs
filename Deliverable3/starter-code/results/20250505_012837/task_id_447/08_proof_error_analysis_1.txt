The error message is telling you that one of your proof obligations is left unsolved. In the theorem

  cubeElements_spec_satisfied (a : Array Int) : cubeElements_spec a (cubeElements a)

after unfolding and simp‐ing, you split the goal into two parts with And.intro. The first conjunct, namely

  a.size = a.size

is trivial (and simp solves it). However, the second conjunct

  ∀ i, i < a.size → (a.map (fun x => x * x * x))[i]! = a[i]! * a[i]! * a[i]!

remains as an unsolved goal.

Your proof then does

  · intros i hi
    simp [Array.getElem_eq_data_get, Array.get!]

and expects that simp (using these hints) will solve the equality. It turns out that simp isn’t enough to show that the i-th element of (a.map (fun x => x * x * x)) is the cube of the i-th element of a. (In Mathlib there is usually a lemma like Array.get_map which states that for any function f and a valid index i we have (a.map f)[i]! = f (a[i]!), and then one can finish the proof by showing that f (a[i]!) is exactly a[i]! * a[i]! * a[i]! when f is the cubing function.)

Because the second conjunct is left unsolved, Lean complains two ways:
1. It shows that there is an unsolved goal.
2. When Lean later reads an “identifier” (or more precisely, when it expects the proof block to be finished), it sees another token and complains “unexpected identifier; expected command.”

In summary, the root problem is that your tactic block never actually proves the universal statement about indices. You need to use the appropriate rewriting lemma (for example, using Array.get_map) or a tactic that reduces the equality to something trivial (like using ring or rfl) to close the goal.

A possible direction for a fix is to rewrite the equality with the proper lemma. For example, you might try something like this:

--------------------------------------------------
import Mathlib
import Aesop

def cubeElements (a : Array Int) : Array Int :=
  a.map (fun x => x * x * x)

def cubeElements_spec (a : Array Int) (result : Array Int) : Prop :=
  (result.size = a.size) ∧
  (∀ i, i < a.size → result[i]! = a[i]! * a[i]! * a[i]!)

theorem cubeElements_spec_satisfied (a : Array Int) :
  cubeElements_spec a (cubeElements a) := by
  unfold cubeElements cubeElements_spec
  apply And.intro
  · simp
  · intros i hi
    -- Rewrite the index access using the proper lemma, e.g. Array.get_map.
    rw [Array.get_map]
    -- Now the goal should reduce to showing x * x * x = x * x * x,
    -- which is true by reflexivity.
    rfl
--------------------------------------------------

The key idea is that by rewriting (a.map f)[i]! to f (a[i]!), the goal becomes trivial.

So, the error was not in the definition of cubeElements but in the incomplete (and insufficient) tactic for the second part of the proof. You must complete the proof by rewriting the array indexing before concluding the equality.