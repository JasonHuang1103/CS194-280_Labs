The error message

  “dsimp made no progress”

indicates that when you ran dsimp, it did not simplify anything (i.e. no reduction steps were performed) and Lean 4 treats that as a failure. (The subsequent “unexpected identifier” error is a side‐effect caused by the failure of dsimp.) 

Here’s what’s happening in your proof:

1. You start by “unfold”ing both minOfThree and minOfThree_spec, which replaces those definitions in your goal. After unfolding, the goal is already in its “unfolded” form.

2. You then invoke dsimp. In Lean 4 the dsimp tactic is designed to simplify the current goal by computing “definitional” reductions. However, in your case nothing “definable” is left to simplify since the unfolding step exposed the definitions completely. Thus dsimp “made no progress” by producing no rewriting. In Lean 4, that situation is treated as an error rather than silently doing nothing.

3. This failure interrupts the tactic script, and the remaining commands are not parsed as part of a valid tactic block (hence the “unexpected identifier; expected command” error).

To fix the issue you can:

• Simply remove the dsimp call if it is not needed after your unfold.
• Alternatively, if you intended to simplify further, consider using a tactic (like simp) that can succeed even if no changes occur, or wrap dsimp in a try, for example:
  try dsimp

The core problem is not in your specification or the overall structure of your proof but in the use of dsimp on a goal where no further definitional simplification is possible. Adjusting or removing the dsimp invocation should resolve the error.