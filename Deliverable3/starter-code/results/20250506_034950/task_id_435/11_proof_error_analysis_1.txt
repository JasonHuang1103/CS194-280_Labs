Below is a step‐by‐step analysis of the issue, followed by a summary of the root cause and a suggestion for fixing the proof.

──────────────────────────────
1. Identifying the Failing Tactic

• The error message begins by reporting that tactic “split” has failed. In our proof we have two occurrences of “split”: one immediately after unfolding the definitions, and another “nested” split (to break up the inner conjunction).  
• The error “unexpected token '·'; expected command” on the following line indicates that Lean is getting confused by the bullet (“·”) markers.

──────────────────────────────
2. Considering the Proof State at That Point

• After the command
  unfold lastDigit lastDigit_spec  
the goal becomes
  (0 ≤ n % 10 ∧ n % 10 < 10) ∧ n % 10 = n % 10.
• When you run “split” on a conjunction, Lean replaces the goal by two subgoals:
  Goal 1: 0 ≤ n % 10 ∧ n % 10 < 10  
  Goal 2: n % 10 = n % 10.
• In the first subgoal you want to split the conjunction further, which is why you write “· split”—this is intended to produce two more subgoals.

──────────────────────────────
3. Matching the Proof Approach with the Specification

• The specification requires showing that:
  (a) n % 10 is between 0 and 9, and
  (b) n % 10 equals itself.
• Using “split” to break apart the conjunctions is a perfectly reasonable strategy.
• The extra “split” inside the first goal is fine conceptually.

──────────────────────────────
4. Checking for Type Mismatches or Incorrect Assumptions

• There aren’t any type mismatches or incorrect calculations. The expressions “n % 10” and the use of “Nat.zero_le” and “Nat.mod_lt” are correct.
• The issue isn’t with the logical content—both parts of the goal are what we expect—but rather with the way the tactic block is structured.

──────────────────────────────
5. Alternative Proof Strategies and the Real Issue

• The error “tactic 'split' failed” combined with “unexpected token '·'” hints that Lean is mis-parsing the bullet markers. In Lean 4 the bullet notation (using “·” or “-”) is sensitive to indentation.
• In our proof the bullet markers (the “·”) appear on lines that are not indented relative to the “split” tactic. Lean expects the bullets for subproofs to be indented one level more than the parent tactic.
• Thus, the “· split” and later “· exact …” lines are out of place in terms of indentation.
• An alternative is either to remove the bullets altogether (using a flat tactic script) or to fix the indentation so that the bullets are correctly nested under their parent tactic.

──────────────────────────────
Detailed Analysis (Root Cause and Suggestions)

Root cause:
  The error arises because of the improper use and indentation of bullet markers in the proof script. Lean 4’s parser uses indentation as part of its syntax for tactic blocks, and if bullets are not indented properly, Lean gets confused. In this case, the “·” bullets that are meant to indicate subproofs after the first “split” are not indented to signal that they belong to the split branch, causing Lean to fail to match the intended structure.

Suggested direction for fixing:
• Ensure that the bullet markers are correctly indented. For example, rewrite the proof as follows:

  theorem lastDigit_spec_satisfied (n : Nat) :
    lastDigit_spec n (lastDigit n) := by
    unfold lastDigit lastDigit_spec
    split
    · split
      · exact Nat.zero_le (n % 10)
      · exact Nat.mod_lt n (by decide)
    · rfl

Notice here that the bullets following “split” are indented one level further than the “split” itself.  
• Alternatively, you can remove the bullet markers and write the tactics sequentially. Either approach will help Lean parse the proof correctly.

──────────────────────────────
Conclusion

The root issue is not with the logical content of your proof (which correctly splits the goal into two parts) but with the formatting and indentation of the bullet markers inside your tactic block. Lean 4 requires that bullets used to structure tactics be indented to indicate the nesting of subproofs. By correcting the indentation (or by reformatting the proof without bullets), the error will be resolved.