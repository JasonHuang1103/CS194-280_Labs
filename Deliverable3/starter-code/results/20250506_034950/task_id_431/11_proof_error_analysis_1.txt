Below is an analysis of what’s going wrong. (Remember that Lean 4 is very picky about indentation, bullet–marker choices, and how you use pattern–matching bindings, so small glitches lead to “unsolved goal” or “unexpected token” errors.)

────────────────────────────
1. Identifying the Failing Tactic

The error message tells you two things:
• In the “mp” and “mpr” cases (the two halves of the ↔), Lean reports unsolved goals. That means one of the subproofs was left incomplete.
• Later Lean complains “unexpected token '·'; expected command”, which means that a bullet token (the “·”) was not accepted where Lean expected a tactic command.

In our proof we begin with

  apply Iff.intro

which creates two subgoals, one for each direction of the equivalence. Then two “bulleted” blocks follow. The bullet markers (“·”) are intended to designate the beginning of each subproof. However, if the indentation or bullet style is off (for example, if Lean 4’s parser does not expect “·” at that point) then Lean treats those tokens as “unexpected.”

────────────────────────────
2. Considering the Proof State

After unfolding definitions and applying Iff.intro the proof state is to prove

(Direction “mp”)
  (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) → (a.any (fun x => b.any (fun y => decide (x = y))) = true)

and

(Direction “mpr”)
  (a.any (fun x => b.any (fun y => decide (x = y))) = true) → (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!)

Within each bullet block you must discharge all remaining goals. If a subproof is not fully solved (for example, if one “constructor” leaves one of its components unproved) then Lean will complain that there are unsolved subgoals. (The error “unsolved goals” is coming from inside the conversion lemmas Array.any_eq_true.mp/mpr that you applied.)

────────────────────────────
3. Does the Approach Match the Specification?

The intended specification is that the Boolean result is equivalent to the existence of some indices with the desired equality. To prove the equivalence, you’ve chosen to “unfold” the definitions and then prove both directions using the conversion lemmas:
 – Array.any_eq_true.mpr “builds” witnesses from a true value,
 – Array.any_eq_true.mp “extracts” witnesses when the search returns true.
This overall plan is fine. (It is common when proving properties about booleans that the “if and only if” is proved by converting between Bool and Prop.) However, the details in the proofs must be fully completed without leaving subgoals and all type conversions must be correct. 

────────────────────────────
4. Inspecting for Type Mismatches and Incorrect Assumptions

There are a couple of issues in the detailed steps:
 a. In your first bullet you start with 
  intro ⟨i, j, hi, hj, h⟩ 
 which correctly destructs the existential. Then you use “use a[i]!,” etc. That part is mostly on track.
 b. In the second bullet (showing the reverse direction) you “extract” the witnesses by writing:
  have ⟨i, hi⟩ := Array.mem_iff_get.mp hx
 …
  exists i, j
  constructor
  · apply i.2
  · constructor
   · apply j.2
   · rw [← heq]; exact hi
Here the mistake is that the pattern–matching binding “⟨i, hi⟩” gives you a natural number i and a proof hi, but then later you try to “apply i.2” and “j.2.” The notation “i.2” expects i itself (as a pair) to have a second projection, but i is already a number (and similarly for j). In other words, the proof mistakenly uses the “.2” projection from a tuple that no longer exists. Instead you should simply use hi (or hj) as your witness that the index is in bounds.
 c. Also note that if a constructor (or bullet block) leaves a goal unsolved, Lean will report “unsolved goals” – so any incomplete subproof is also an error.

────────────────────────────
5. Considering Alternative Proof Strategies

Since the conversion lemmas for Array.any (Array.any_eq_true.mp/mpr) are available, one may try one of the following:
 • Instead of using the “·” bullets and interleaving tactics, structure the two subproofs with explicit blocks (using braces { … } or using “by” with a nested tactic proof) so that the scope and nested bullets are unambiguous.
 • Avoid using projections like i.2 and j.2—instead, bind the index and its bound–proof with names (such as i and hi) and carry hi along to the corresponding goal.
 • Finally, if Lean complains about the “·” bullet, try replacing them with dashes “–” or with the “begin ... end” block if you suspect the parser might be misinterpreting the bullet markers.

────────────────────────────
Detailed Analysis, Root Cause, and Direction for a Fix

The root causes are:
1. Bulleted proof blocks (“·” markers) are not correctly recognized due to indentation or used notation. Lean’s parser expects tactic commands at the proper indentation level. (In Lean 4 the bullet style can be sensitive; sometimes you must use “-” or “•” with proper spacing.)
2. Within one of your subproofs you try to use “i.2” and “j.2” even though your pattern–match has already separated out the witness (i and hi). This is a type error because natural numbers do not carry a “.2” field. You need to use the bound proofs (hi and hj) directly.
3. Finally, because one or more subproofs are left incomplete or badly indented, Lean reports that there are “unsolved goals.”

To fix the issue, I suggest the following:
 • Revisit your bullet notation. Make sure your bullets (“·”, “–”, or “•”) start at the correct indentation level after “apply Iff.intro” and that each subproof is clearly delimited. For example, you could write:

-------------------------------------------------
theorem hasCommonElement_spec_satisfied (a b : Array Int) :
  hasCommonElement_spec a b (hasCommonElement a b) := by
  unfold hasCommonElement hasCommonElement_spec
  apply Iff.intro
  · -- mp: from ∃ i j, … to the Bool being true
    intro ⟨i, j, hi, hj, h⟩
    apply Array.any_eq_true.mpr
    use a[i]!
    constructor
    · apply Array.get_mem
    · apply Array.any_eq_true.mpr
      use b[j]!
      constructor
      · apply Array.get_mem
      · exact h
  · -- mpr: from Bool true to ∃ i j, …
    intro h
    apply Array.any_eq_true.mp h
    intro x
    intro ⟨hx, hy⟩
    apply Array.any_eq_true.mp hy
    intro y
    intro ⟨hy', heq⟩
    have ⟨i, hi⟩ := Array.mem_iff_get.mp hx
    have ⟨j, hj⟩ := Array.mem_iff_get.mp hy'
    exists i, j
    constructor
    · exact hi
    · constructor
      · exact hj
      · rw [← heq]
        exact hi
-------------------------------------------------

 • Replace “i.2” with “hi” and “j.2” with “hj” (or whatever names you gave them earlier) so that the types match.

This should resolve the “unsolved goals” (by correctly finishing each bullet) and eliminate the “unexpected token ‘·’” arising from bad bullet formatting.

────────────────────────────
Conclusion

The error arises because (a) Lean isn’t recognizing your bullet markers correctly—likely due to indentation or an unexpected token—and (b) you are attempting to use tuple projections (like “i.2”) on values that aren’t pairs. In combination, these issues lead to unsolved subgoals in your Iff.intro proof and type mismatches in the index–bound proofs.

The way to fix the proof is to check and fix the bullet indentation, use a bullet style Lean 4 expects (or use explicit begin ... end blocks), and to replace the incorrect “i.2” and “j.2” with the proper bound names (hi and hj) returned by your pattern–matching. This will align the proof method with the specification and resolve the errors.