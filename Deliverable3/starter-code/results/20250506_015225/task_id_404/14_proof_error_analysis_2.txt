Below is a step‐by‐step analysis of what’s going wrong and why the proof “fails” in Lean 4.

──────────────────────────────
1. Which tactic is failing and why

The tactic that “misbehaves” is the use of the if‐splitting tactic combined with bullet notation. In your proof you write

  split_ifs with h
  · exact ⟨⟨le_refl a, h⟩, Or.inl rfl⟩
  · have : b < a := Int.not_le.mp h
    exact ⟨⟨le_of_lt this, le_refl b⟩, Or.inr rfl⟩

Here Lean splits the goal into two cases (one for when the “if” condition is true and one for when it’s false). In the “true” branch the goal is to prove  
  (a ≤ a ∧ a ≤ b) ∧ (a = a ∨ a = b)  
and in the “false” branch the goal is to prove  
  (b ≤ a ∧ b ≤ b) ∧ (b = a ∨ b = b).

While the provided expressions look “on target”, Lean complains in both cases that there remain “unsolved goals”. Moreover, the error message

  error: unexpected token '·'; expected command

indicates that Lean did not expect the bullet markers as written after the “split_ifs” command.

──────────────────────────────
2. Considering the proof state

After executing

  unfold myMin myMin_spec  
  split_ifs with h

Lean has created two subgoals for the two branches:
• In the first branch (when h : a ≤ b) the goal is
  (a ≤ a ∧ a ≤ b) ∧ (a = a ∨ a = b)
and your “exact ⟨⟨le_refl a, h⟩, Or.inl rfl⟩” should, in principle, close that goal.
• In the second branch (with h being a proof of ¬ (a ≤ b)) the goal is
  (b ≤ a ∧ b ≤ b) ∧ (b = a ∨ b = b)
and here you use “have : b < a := Int.not_le.mp h” (which correctly transforms ¬(a ≤ b) into b < a) and then “exact ⟨⟨le_of_lt this, le_refl b⟩, Or.inr rfl⟩” to finish.

The fact that Lean emits “unsolved goals” means that even though the intended “exact” steps are there, Lean isn’t recognizing your bullet‐structured proof as completely closing both cases. That “unexpected token ‘·’” error on the second bullet is a strong signal that the bullet markers are not parsed in the expected way.

──────────────────────────────
3. Checking if the proof approach matches the specification

Your specification of myMin_spec is that the result is less than or equal to both inputs and that it equals one of the inputs. In the “if” branch the result is a, and in the “else” branch the result is b – exactly what you use in the inner proofs. So the overall approach is correct from a logical standpoint.

──────────────────────────────
4. Type mismatches or incorrect assumptions

No type mismatch is present with respect to the values of “a” and “b” or the ordering proofs. For the “true” branch you use le_refl (for a ≤ a) and the hypothesis h (for a ≤ b). For the “false” branch, you convert the negation ¬(a ≤ b) into b < a (using Int.not_le.mp, which is valid) and then use le_of_lt to get b ≤ a and le_refl b for b ≤ b. The final parts (Or.inl rfl and Or.inr rfl) correctly witness the disjunction. So the “mathematical” part is sound.

──────────────────────────────
5. Alternative proof strategies

A common alternative is to avoid the bullet markers if they cause trouble—especially if the “split_ifs” already splits the goal. One might instead write:

  unfold myMin myMin_spec
  split_ifs with h
  · exact ⟨⟨le_refl a, h⟩, Or.inl rfl⟩
  · have H : b < a := Int.not_le.mp h
    exact ⟨⟨le_of_lt H, le_refl b⟩, Or.inr rfl⟩

or even use “if h : a ≤ b then … else …” without bullet markers. (Sometimes simply replacing “·” with “-” works in Lean.)

Additionally, you could write the proof using tactics such as “cases” or explicit “if ... then ... else ...” reasoning, which can avoid confusion with bullet markers.

──────────────────────────────
Summary and Root Cause

The root issue is not with your mathematical reasoning but with the formatting of your proof script. In Lean 4 the use of bullet markers (the “·” symbol) must follow the correct indentation and structure. The error message “unexpected token '·'; expected command” indicates that Lean’s parser was not expecting a bullet marker at that point—likely because the bullets’ indentation did not clearly indicate that they belong to the branches produced by “split_ifs.”

A recommended fix is to adjust the formatting so that each branch is clearly delimited. For example, you might try:

theorem myMin_spec_satisfied (a : Int) (b : Int) :
  myMin_spec a b (myMin a b) := by
  unfold myMin myMin_spec
  split_ifs with h
  · exact ⟨⟨le_refl a, h⟩, Or.inl rfl⟩
  · have H : b < a := Int.not_le.mp h
    exact ⟨⟨le_of_lt H, le_refl b⟩, Or.inr rfl⟩

Make sure the bullet markers are aligned with the “split_ifs” command’s body. Alternatively, you can omit bullets entirely and use “if h : a ≤ b then … else …” expressions within the proof script.

──────────────────────────────
Conclusion

Your proof error is caused by Lean’s inability to parse the bullet markers in the context of the “split_ifs” branching. Although your logical steps (unfolding definitions, splitting the if‐statement, and then applying “exact” with the appropriate constructors) are correct, the indentation and bullet marker usage causes Lean to think that there are still unsolved goals and that a bullet marker is an unexpected token. Fixing the indentation so that the bullets clearly belong to the respective subgoal blocks (or using a different proof style) will resolve the error.

Happy proving!