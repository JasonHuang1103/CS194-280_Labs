Integers
The Lean Language Reference
The Lean Language Reference
Table of Contents
1.
Introduction
2.
Elaboration and Compilation
3.
Interacting with Lean
4.
The Type System
5.
Source Files and Modules
6.
Namespaces and Sections
7.
Definitions
8.
Axioms
9.
Attributes
10.
Terms
11.
Type Classes
12.
Coercions
13.
Tactic Proofs
14.
Functors, Monads and
do
-Notation
15.
IO
16.
The Simplifier
17.
Basic Propositions
18.
Basic Types
19.
Notations and Macros
20.
Run-Time Code
21.
Build Tools and Distribution
Release Notes
Index
18.
Basic Types
18.1.
Natural Numbers
18.2.
Integers
18.3.
Finite Natural Numbers
18.4.
Fixed-Precision Integers
18.5.
Bitvectors
18.6.
Floating-Point Numbers
18.7.
Characters
18.8.
Strings
18.9.
The Unit Type
18.10.
The Empty Type
18.11.
Booleans
18.12.
Optional Values
18.13.
Tuples
18.14.
Sum Types
18.15.
Linked Lists
18.16.
Arrays
18.17.
Subtypes
18.18.
Lazy Computations
18.2.
Integers
1.
Logical Model
Int
2.
Run-Time Representation
3.
Syntax
-[
…
+1]
4.
API Reference
4.1.
Properties
sign
4.2.
Conversions
natAbs
toNat
toNat?
toISize
toInt8
toInt16
toInt32
toInt64
repr
4.3.
Arithmetic
add
sub
subNatNat
neg
negOfNat
mul
pow
gcd
lcm
4.3.1.
Division
ediv
emod
tdiv
tmod
bdiv
bmod
fdiv
fmod
4.4.
Bitwise Operators
not
shiftRight
4.5.
Comparisons
le
lt
decEq
Source Code
Report Issues
←
18.1. Natural Numbers
18.3. Finite Natural Numbers
→
18.2. Integers
🔗
The integers are whole numbers, both positive and negative.
Integers are arbitrary-precision, limited only by the capability of the hardware on which Lean is running; for fixed-width integers that are used in programming and computer science, please see the
section on fixed-precision integers
.
Integers are specially supported by Lean's implementation.
The logical model of the integers is based on the natural numbers: each integer is modeled as either a natural number or the negative successor of a natural number.
Operations on the integers are specified using this model, which is used in the kernel and in interpreted code.
In these contexts, integer code inherits the performance benefits of the natural numbers' special support.
In compiled code, integers are represented as efficient arbitrary-precision integers, and sufficiently small numbers are stored as unboxed values that don't require indirection through a pointer.
Arithmetic operations are implemented by primitives that take advantage of the efficient representations.
18.2.1. Logical Model
🔗
Integers are represented either as a natural number or as the negation of the successor of a natural number.
🔗
inductive type
Int :
Type
Int :
Type
The integers.
This type is special-cased by the compiler and overridden with an efficient implementation. The
runtime has a special representation for
Int
that stores “small” signed numbers directly, while
larger numbers use a fast arbitrary-precision arithmetic library (usually
GMP
). A “small number” is an integer that can be encoded with one fewer bits
than the platform's pointer size (i.e. 63 bits on 64-bit architectures and 31 bits on 32-bit
architectures).
Constructors
ofNat :
Nat
→
Int
A natural number is an integer.
This constructor covers the non-negative integers (from
0
to
∞
).
negSucc :
Nat
→
Int
The negation of the successor of a natural number is an integer.
This constructor covers the negative integers (from
-
1
to
-∞
).
This representation of the integers has a number of useful properties.
It is relatively simple to use and to understand.
Unlike a pair of a sign and a
Nat
, there is a unique representation for
0
, which simplifies reasoning about equality.
Integers can also be represented as a pair of natural numbers in which one is subtracted from the other, but this requires a
quotient type
to be well-behaved, and quotient types can be laborious to work with due to the need to prove that functions respect the equivalence relation.
18.2.2. Run-Time Representation
🔗
Like
natural numbers
, sufficiently-small integers are represented as unboxed values: the lowest-order bit in an object pointer is used to indicate that the value is not, in fact, a pointer.
If an integer is too large to fit in the remaining bits, it is instead allocated as an ordinary Lean object that consists of an object header and an arbitrary-precision integer.
18.2.3. Syntax
🔗
The
OfNat
Int
instance allows numerals to be used as literals, both in expression and in pattern contexts.
(
OfNat.ofNat
n
:
Int
)
reduces to the constructor application
Int.ofNat
n
.
The
Neg
Int
instance allows negation to be used as well.
On top of these instances, there is special syntax for the constructor
Int.negSucc
that is available when the
Int
namespace is opened.
The notation
-[
n
+1]
is suggestive of
-(n + 1)
, which is the meaning of
Int.negSucc
n
.
syntax
Negative Successor
-[
n
+1]
is notation for
Int.negSucc
n
.
term
::=
...
|
`-[n+1]` is suggestive notation for `negSucc n`, which is the second constructor of
`Int` for making strictly negative numbers by mapping `n : Nat` to `-(n + 1)`.
-[
term
+1]
18.2.4. API Reference
18.2.4.1. Properties
🔗
def
Int.sign :
Int
→
Int
Int.sign :
Int
→
Int
Returns the “sign” of the integer as another integer:
1
for positive numbers,
-
1
for negative numbers, and
0
for
0
.
Examples:
Int.sign
34
=
1
Int.sign
2
=
1
Int.sign
0
=
0
Int.sign
-
1
=
-
1
Int.sign
-
362
=
-
1
18.2.4.2. Conversions
🔗
def
Int.natAbs (
m
:
Int
) :
Nat
Int.natAbs (
m
:
Int
) :
Nat
The absolute value of an integer is its distance from
0
.
This function is overridden by the compiler with an efficient implementation. This definition is
the logical model.
Examples:
(
7
:
Int
)
.
natAbs
=
7
(
0
:
Int
)
.
natAbs
=
0
(
(
-
11
:
Int
)
.
natAbs
=
11
🔗
def
Int.toNat :
Int
→
Nat
Int.toNat :
Int
→
Nat
Converts an integer into a natural number. Negative numbers are converted to
0
.
Examples:
(
7
:
Int
)
.
toNat
=
7
(
0
:
Int
)
.
toNat
=
0
(
-
7
:
Int
)
.
toNat
=
0
🔗
def
Int.toNat? :
Int
→
Option
Nat
Int.toNat? :
Int
→
Option
Nat
Converts an integer into a natural number. Returns
none
for negative numbers.
Examples:
(
7
:
Int
)
.
toNat?
=
some
7
(
0
:
Int
)
.
toNat?
=
some
0
(
-
7
:
Int
)
.
toNat?
=
none
🔗
def
Int.toISize (
i
:
Int
) :
ISize
Int.toISize (
i
:
Int
) :
ISize
Converts an arbitrary-precision integer to a word-sized signed integer, wrapping around on over- or
underflow.
This function is overridden at runtime with an efficient implementation.
🔗
def
Int.toInt8 (
i
:
Int
) :
Int8
Int.toInt8 (
i
:
Int
) :
Int8
Converts an arbitrary-precision integer to an 8-bit integer, wrapping on overflow or underflow.
Examples:
Int.toInt8
48
=
48
Int.toInt8
(
-
115
)
=
-
115
Int.toInt8
(
-
129
)
=
127
Int.toInt8
(
128
)
=
-
128
🔗
def
Int.toInt16 (
i
:
Int
) :
Int16
Int.toInt16 (
i
:
Int
) :
Int16
Converts an arbitrary-precision integer to a 16-bit integer, wrapping on overflow or underflow.
Examples:
Int.toInt16
48
=
48
Int.toInt16
(
-
129
)
=
-
129
Int.toInt16
(
128
)
=
128
Int.toInt16
70000
=
4464
Int.toInt16
(
-
40000
)
=
25536
🔗
def
Int.toInt32 (
i
:
Int
) :
Int32
Int.toInt32 (
i
:
Int
) :
Int32
Converts an arbitrary-precision integer to a 32-bit integer, wrapping on overflow or underflow.
Examples:
Int.toInt32
48
=
48
Int.toInt32
(
-
129
)
=
-
129
Int.toInt32
70000
=
70000
Int.toInt32
(
-
40000
)
=
-
40000
Int.toInt32
2147483648
=
-
2147483648
Int.toInt32
(
-
2147483649
)
=
2147483647
🔗
def
Int.toInt64 (
i
:
Int
) :
Int64
Int.toInt64 (
i
:
Int
) :
Int64
Converts an arbitrary-precision integer to a 64-bit integer, wrapping on overflow or underflow.
This function is overridden at runtime with an efficient implementation.
Examples:
Int.toInt64
48
=
48
Int.toInt64
(
-
40_000
)
=
-
40_000
Int.toInt64
2_147_483_648
=
2_147_483_648
Int.toInt64
(
-
2_147_483_649
)
=
-
2_147_483_649
Int.toInt64
9_223_372_036_854_775_808
=
-
9_223_372_036_854_775_808
Int.toInt64
(
-
9_223_372_036_854_775_809
)
=
9_223_372_036_854_775_807
🔗
def
Int.repr :
Int
→
String
Int.repr :
Int
→
String
Returns the decimal string representation of an integer.
18.2.4.3. Arithmetic
Typically, arithmetic operations on integers are accessed using Lean's overloaded arithmetic notation.
In particular, the instances of
Add
Int
,
Neg
Int
,
Sub
Int
, and
Mul
Int
allow ordinary infix operators to be used.
Division
is somewhat more intricate, because there are multiple sensible notions of division on integers.
🔗
def
Int.add (
m
n
:
Int
) :
Int
Int.add (
m
n
:
Int
) :
Int
Addition of integers, usually accessed via the
+
operator.
This function is overridden by the compiler with an efficient implementation. This definition is
the logical model.
Examples:
(
7
:
Int
)
+
(
6
:
Int
)
=
13
(
6
:
Int
)
+
(
-
6
:
Int
)
=
0
🔗
def
Int.sub (
m
n
:
Int
) :
Int
Int.sub (
m
n
:
Int
) :
Int
Subtraction of integers, usually accessed via the
-
operator.
This function is overridden by the compiler with an efficient implementation. This definition is
the logical model.
Examples:
(
63
:
Int
)
-
(
6
:
Int
)
=
57
(
7
:
Int
)
-
(
0
:
Int
)
=
7
(
0
:
Int
)
-
(
7
:
Int
)
=
-
7
🔗
def
Int.subNatNat (
m
n
:
Nat
) :
Int
Int.subNatNat (
m
n
:
Nat
) :
Int
Non-truncating subtraction of two natural numbers.
Examples:
Int.subNatNat
5
2
=
3
Int.subNatNat
2
5
=
-
3
Int.subNatNat
0
13
=
-
13
🔗
def
Int.neg (
n
:
Int
) :
Int
Int.neg (
n
:
Int
) :
Int
Negation of integers, usually accessed via the
-
prefix operator.
This function is overridden by the compiler with an efficient implementation. This definition is
the logical model.
Examples:
-
(
6
:
Int
)
=
-
6
-
(
-
6
:
Int
)
=
6
(
12
:
Int
)
.
neg
=
-
12
🔗
def
Int.negOfNat :
Nat
→
Int
Int.negOfNat :
Nat
→
Int
Negation of natural numbers.
Examples:
Int.negOfNat
6
=
-
6
Int.negOfNat
0
=
0
🔗
def
Int.mul (
m
n
:
Int
) :
Int
Int.mul (
m
n
:
Int
) :
Int
Multiplication of integers, usually accessed via the
*
operator.
This function is overridden by the compiler with an efficient implementation. This definition is
the logical model.
Examples:
(
63
:
Int
)
*
(
6
:
Int
)
=
378
(
6
:
Int
)
*
(
-
6
:
Int
)
=
-
36
(
7
:
Int
)
*
(
0
:
Int
)
=
0
🔗
def
Int.pow (
m
:
Int
) :
Nat
→
Int
Int.pow (
m
:
Int
) :
Nat
→
Int
Power of an integer to a natural number, usually accessed via the
^
operator.
Examples:
(
2
:
Int
)
^
4
=
16
(
10
:
Int
)
^
0
=
1
(
0
:
Int
)
^
10
=
0
(
-
7
:
Int
)
^
3
=
-
343
🔗
def
Int.gcd (
m
n
:
Int
) :
Nat
Int.gcd (
m
n
:
Int
) :
Nat
Computes the greatest common divisor of two integers as a natural number. The GCD of two integers is
the largest natural number that evenly divides both. However, the GCD of a number and
0
is the
number's absolute value.
This implementation uses
Nat.gcd
, which is overridden in both the kernel and the compiler to
efficiently evaluate using arbitrary-precision arithmetic.
Examples:
Int.gcd
10
15
=
5
Int.gcd
10
(
-
15
)
=
5
Int.gcd
(
-
6
)
(
-
9
)
=
3
Int.gcd
0
5
=
5
Int.gcd
(
-
7
)
0
=
7
🔗
def
Int.lcm (
m
n
:
Int
) :
Nat
Int.lcm (
m
n
:
Int
) :
Nat
Computes the least common multiple of two integers as a natural number. The LCM of two integers is
the smallest natural number that's evenly divisible by the absolute values of both.
Examples:
Int.lcm
9
6
=
18
Int.lcm
9
(
-
6
)
=
18
Int.lcm
9
3
=
9
Int.lcm
9
(
-
3
)
=
9
Int.lcm
0
3
=
0
Int.lcm
(
-
3
)
0
=
0
18.2.4.3.1. Division
🔗
The
Div
Int
and
Mod
Int
instances implement Euclidean division, described in the reference for
Int.ediv
.
This is not, however, the only sensible convention for rounding and remainders in division.
Four pairs of division and modulus functions are available, implementing various conventions.
Division by 0
In all integer division conventions, division by
0
is defined to be
0
:
0
#eval
Int.ediv
5
0
0
#eval
Int.ediv
0
0
0
#eval
Int.ediv
(
-
5
)
0
0
#eval
Int.bdiv
5
0
0
#eval
Int.bdiv
0
0
0
#eval
Int.bdiv
(
-
5
)
0
0
#eval
Int.fdiv
5
0
0
#eval
Int.fdiv
0
0
0
#eval
Int.fdiv
(
-
5
)
0
0
#eval
Int.tdiv
5
0
0
#eval
Int.tdiv
0
0
0
#eval
Int.tdiv
(
-
5
)
0
All evaluate to 0.
0
🔗
def
Int.ediv :
Int
→
Int
→
Int
Int.ediv :
Int
→
Int
→
Int
Integer division that uses the E-rounding convention. Usually accessed via the
/
operator.
Division by zero is defined to be zero, rather than an error.
In the E-rounding convention (Euclidean division),
Int.emod
x
y
satisfies
0
≤
Int.emod
x
y
<
Int.natAbs
y
for
y
≠
0
and
Int.ediv
is the unique function satisfying
Int.emod
x
y
+
(
Int
.
edivx
y
)
*
y
=
x
for
y
≠
0
.
This means that
Int.ediv
x
y
is
⌊x / y⌋
when
y
>
0
and
⌈x / y⌉
when
y
<
0
.
This function is overridden by the compiler with an efficient implementation. This definition is
the logical model.
Examples:
(
7
:
Int
)
/
(
0
:
Int
)
=
0
(
0
:
Int
)
/
(
7
:
Int
)
=
0
(
12
:
Int
)
/
(
6
:
Int
)
=
2
(
12
:
Int
)
/
(
-
6
:
Int
)
=
-
2
(
-
12
:
Int
)
/
(
6
:
Int
)
=
-
2
(
-
12
:
Int
)
/
(
-
6
:
Int
)
=
2
(
12
:
Int
)
/
(
7
:
Int
)
=
1
(
12
:
Int
)
/
(
-
7
:
Int
)
=
-
1
(
-
12
:
Int
)
/
(
7
:
Int
)
=
-
2
(
-
12
:
Int
)
/
(
-
7
:
Int
)
=
2
🔗
def
Int.emod :
Int
→
Int
→
Int
Int.emod :
Int
→
Int
→
Int
Integer modulus that uses the E-rounding convention. Usually accessed via the
%
operator.
In the E-rounding convention (Euclidean division),
Int.emod
x
y
satisfies
0
≤
Int.emod
x
y
<
Int.natAbs
y
for
y
≠
0
and
Int.ediv
is the unique function satisfying
Int.emod
x
y
+
(
Int
.
edivx
y
)
*
y
=
x
for
y
≠
0
.
This function is overridden by the compiler with an efficient implementation. This definition is
the logical model.
Examples:
(
7
:
Int
)
%
(
0
:
Int
)
=
7
(
0
:
Int
)
%
(
7
:
Int
)
=
0
(
12
:
Int
)
%
(
6
:
Int
)
=
0
(
12
:
Int
)
%
(
-
6
:
Int
)
=
0
(
-
12
:
Int
)
%
(
6
:
Int
)
=
0
(
-
12
:
Int
)
%
(
-
6
:
Int
)
=
0
(
12
:
Int
)
%
(
7
:
Int
)
=
5
(
12
:
Int
)
%
(
-
7
:
Int
)
=
5
(
-
12
:
Int
)
%
(
7
:
Int
)
=
2
(
-
12
:
Int
)
%
(
-
7
:
Int
)
=
2
🔗
def
Int.tdiv :
Int
→
Int
→
Int
Int.tdiv :
Int
→
Int
→
Int
Integer division using the T-rounding convention.
In
the T-rounding convention
(division with truncation), all rounding is towards zero.
Division by 0 is defined to be 0. In this convention,
Int.tmod
a
b
+
b
*
(
Int.tdiv
a
b
)
=
a
.
This function is overridden by the compiler with an efficient implementation. This definition is the
logical model.
Examples:
(
7
:
Int
)
.
tdiv
(
0
:
Int
)
=
0
(
0
:
Int
)
.
tdiv
(
7
:
Int
)
=
0
(
12
:
Int
)
.
tdiv
(
6
:
Int
)
=
2
(
12
:
Int
)
.
tdiv
(
-
6
:
Int
)
=
-
2
(
-
12
:
Int
)
.
tdiv
(
6
:
Int
)
=
-
2
(
-
12
:
Int
)
.
tdiv
(
-
6
:
Int
)
=
2
(
12
:
Int
)
.
tdiv
(
7
:
Int
)
=
1
(
12
:
Int
)
.
tdiv
(
-
7
:
Int
)
=
-
1
(
-
12
:
Int
)
.
tdiv
(
7
:
Int
)
=
-
1
(
-
12
:
Int
)
.
tdiv
(
-
7
:
Int
)
=
1
🔗
def
Int.tmod :
Int
→
Int
→
Int
Int.tmod :
Int
→
Int
→
Int
Integer modulo using the T-rounding convention.
In
the T-rounding convention
(division with truncation), all rounding is towards zero.
Division by 0 is defined to be 0 and
Int.tmod
a
0
=
a
.
In this convention,
Int.tmod
a
b
+
b
*
(
Int.tdiv
a
b
)
=
a
. Additionally,
Int.natAbs
(
Int.tmod
a
b
)
=
Int.natAbs
a
%
Int.natAbs
b
, and when
b
does not divide
a
,
Int.tmod
a
b
has the same sign as
a
.
This function is overridden by the compiler with an efficient implementation. This definition is the
logical model.
Examples:
(
7
:
Int
)
.
tmod
(
0
:
Int
)
=
7
(
0
:
Int
)
.
tmod
(
7
:
Int
)
=
0
(
12
:
Int
)
.
tmod
(
6
:
Int
)
=
0
(
12
:
Int
)
.
tmod
(
-
6
:
Int
)
=
0
(
-
12
:
Int
)
.
tmod
(
6
:
Int
)
=
0
(
-
12
:
Int
)
.
tmod
(
-
6
:
Int
)
=
0
(
12
:
Int
)
.
tmod
(
7
:
Int
)
=
5
(
12
:
Int
)
.
tmod
(
-
7
:
Int
)
=
5
(
-
12
:
Int
)
.
tmod
(
7
:
Int
)
=
-
5
(
-
12
:
Int
)
.
tmod
(
-
7
:
Int
)
=
-
5
🔗
def
Int.bdiv (
x
:
Int
) (
m
:
Nat
) :
Int
Int.bdiv (
x
:
Int
) (
m
:
Nat
) :
Int
Balanced division.
This returns the unique integer so that
b
*
(
Int.bdiv
a
b
)
+
Int.bmod
a
b
=
a
.
Examples:
(
7
:
Int
)
.
bdiv
0
=
0
(
0
:
Int
)
.
bdiv
7
=
0
(
12
:
Int
)
.
bdiv
6
=
2
(
12
:
Int
)
.
bdiv
7
=
2
(
12
:
Int
)
.
bdiv
8
=
2
(
12
:
Int
)
.
bdiv
9
=
1
(
-
12
:
Int
)
.
bdiv
6
=
-
2
(
-
12
:
Int
)
.
bdiv
7
=
-
2
(
-
12
:
Int
)
.
bdiv
8
=
-
1
(
-
12
:
Int
)
.
bdiv
9
=
-
1
🔗
def
Int.bmod (
x
:
Int
) (
m
:
Nat
) :
Int
Int.bmod (
x
:
Int
) (
m
:
Nat
) :
Int
Balanced modulus.
This version of integer modulus uses the balanced rounding convention, which guarantees that
-
m
/
2
≤
Int.bmod
x
m
<
m
/
2
for
m
≠
0
and
Int.bmod
x
m
is congruent to
x
modulo
m
.
If
m
=
0
, then
Int.bmod
x
m
=
x
.
Examples:
(
7
:
Int
)
.
bmod
0
=
7
(
0
:
Int
)
.
bmod
7
=
0
(
12
:
Int
)
.
bmod
6
=
0
(
12
:
Int
)
.
bmod
7
=
-
2
(
12
:
Int
)
.
bmod
8
=
-
4
(
12
:
Int
)
.
bmod
9
=
3
(
-
12
:
Int
)
.
bmod
6
=
0
(
-
12
:
Int
)
.
bmod
7
=
2
(
-
12
:
Int
)
.
bmod
8
=
-
4
(
-
12
:
Int
)
.
bmod
9
=
-
3
🔗
def
Int.fdiv :
Int
→
Int
→
Int
Int.fdiv :
Int
→
Int
→
Int
Integer division using the F-rounding convention.
In the F-rounding convention (flooring division),
Int.fdiv
x
y
satisfies
Int.fdiv x y = ⌊x / y⌋
and
Int.fmod
is the unique function satisfying
Int.fmod
x
y
+
(
Int.fdiv
x
y
)
*
y
=
x
.
Examples:
(
7
:
Int
)
.
fdiv
(
0
:
Int
)
=
0
(
0
:
Int
)
.
fdiv
(
7
:
Int
)
=
0
(
12
:
Int
)
.
fdiv
(
6
:
Int
)
=
2
(
12
:
Int
)
.
fdiv
(
-
6
:
Int
)
=
-
2
(
-
12
:
Int
)
.
fdiv
(
6
:
Int
)
=
-
2
(
-
12
:
Int
)
.
fdiv
(
-
6
:
Int
)
=
2
(
12
:
Int
)
.
fdiv
(
7
:
Int
)
=
1
(
12
:
Int
)
.
fdiv
(
-
7
:
Int
)
=
-
2
(
-
12
:
Int
)
.
fdiv
(
7
:
Int
)
=
-
2
(
-
12
:
Int
)
.
fdiv
(
-
7
:
Int
)
=
1
🔗
def
Int.fmod :
Int
→
Int
→
Int
Int.fmod :
Int
→
Int
→
Int
Integer modulus using the F-rounding convention.
In the F-rounding convention (flooring division),
Int.fdiv
x
y
satisfies
Int.fdiv x y = ⌊x / y⌋
and
Int.fmod
is the unique function satisfying
Int.fmod
x
y
+
(
Int.fdiv
x
y
)
*
y
=
x
.
Examples:
(
7
:
Int
)
.
fmod
(
0
:
Int
)
=
7
(
0
:
Int
)
.
fmod
(
7
:
Int
)
=
0
(
12
:
Int
)
.
fmod
(
6
:
Int
)
=
0
(
12
:
Int
)
.
fmod
(
-
6
:
Int
)
=
0
(
-
12
:
Int
)
.
fmod
(
6
:
Int
)
=
0
(
-
12
:
Int
)
.
fmod
(
-
6
:
Int
)
=
0
(
12
:
Int
)
.
fmod
(
7
:
Int
)
=
5
(
12
:
Int
)
.
fmod
(
-
7
:
Int
)
=
-
2
(
-
12
:
Int
)
.
fmod
(
7
:
Int
)
=
2
(
-
12
:
Int
)
.
fmod
(
-
7
:
Int
)
=
-
5
18.2.4.4. Bitwise Operators
Bitwise operators on
Int
can be understood as bitwise operators on an infinite stream of bits that are the twos-complement representation of integers.
🔗
def
Int.not :
Int
→
Int
Int.not :
Int
→
Int
Bitwise not, usually accessed via the
~~~
prefix operator.
Interprets the integer as an infinite sequence of bits in two's complement and complements each bit.
Examples:
~~~
(
0
:
Int
)
=
-
1
~~~
(
1
:
Int
)
=
-
2
~~~
(
-
1
:
Int
)
=
0
🔗
def
Int.shiftRight :
Int
→
Nat
→
Int
Int.shiftRight :
Int
→
Nat
→
Int
Bitwise right shift, usually accessed via the
>>>
operator.
Interprets the integer as an infinite sequence of bits in two's complement and shifts the value to
the right.
Examples:
(
0b0111
:
Int
)
>>>
1
=
0b0011
(
0b1000
:
Int
)
>>>
1
=
0b0100
(
-
0b1000
:
Int
)
>>>
1
=
-
0b0100
(
-
0b0111
:
Int
)
>>>
1
=
-
0b0100
18.2.4.5. Comparisons
Equality and inequality tests on
Int
are typically performed using the decidability of its equality and ordering relations or using the
BEq
Int
and
Ord
Int
instances.
🔗
def
Int.le (
a
b
:
Int
) :
Prop
Int.le (
a
b
:
Int
) :
Prop
Non-strict inequality of integers, usually accessed via the
≤
operator.
a
≤
b
is defined as
b
-
a
≥
0
, using
Int.NonNeg
.
🔗
def
Int.lt (
a
b
:
Int
) :
Prop
Int.lt (
a
b
:
Int
) :
Prop
Strict inequality of integers, usually accessed via the
<
operator.
a
<
b
when
a
+
1
≤
b
.
🔗
def
Int.decEq (
a
b
:
Int
) :
Decidable
(
a
=
b
)
Int.decEq (
a
b
:
Int
) :
Decidable
(
a
=
b
)
Decides whether two integers are equal. Usually accessed via the
DecidableEq
Int
instance.
This function is overridden by the compiler with an efficient implementation. This definition is the
logical model.
Examples:
show
(
7
:
Int
)
=
(
3
:
Int
)
+
(
4
:
Int
)
by
decide
if
(
6
:
Int
)
=
(
3
:
Int
)
*
(
2
:
Int
)
then
"yes"
else
"no"
=
"yes"
(
¬
(
6
:
Int
)
=
(
3
:
Int
)
)
=
true
←
18.1. Natural Numbers
18.3. Finite Natural Numbers
→